{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Your first neural network\n",
    "\n",
    "In this project, you'll build your first neural network and use it to predict daily bike rental ridership. We've provided some of the code, but left the implementation of the neural network up to you (for the most part). After you've submitted this project, feel free to explore the data and the model more.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load and prepare the data\n",
    "\n",
    "A critical step in working with neural networks is preparing the data correctly. Variables on different scales make it difficult for the network to efficiently learn the correct weights. Below, we've written the code to load and prepare the data. You'll learn more about this soon!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "data_path = 'Bike-Sharing-Dataset/hour.csv'\n",
    "\n",
    "rides = pd.read_csv(data_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instant</th>\n",
       "      <th>dteday</th>\n",
       "      <th>season</th>\n",
       "      <th>yr</th>\n",
       "      <th>mnth</th>\n",
       "      <th>hr</th>\n",
       "      <th>holiday</th>\n",
       "      <th>weekday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weathersit</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>cnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.2879</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.2727</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.2727</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.2879</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.2879</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   instant      dteday  season  yr  mnth  hr  holiday  weekday  workingday  \\\n",
       "0        1  2011-01-01       1   0     1   0        0        6           0   \n",
       "1        2  2011-01-01       1   0     1   1        0        6           0   \n",
       "2        3  2011-01-01       1   0     1   2        0        6           0   \n",
       "3        4  2011-01-01       1   0     1   3        0        6           0   \n",
       "4        5  2011-01-01       1   0     1   4        0        6           0   \n",
       "\n",
       "   weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  \n",
       "0           1  0.24  0.2879  0.81        0.0       3          13   16  \n",
       "1           1  0.22  0.2727  0.80        0.0       8          32   40  \n",
       "2           1  0.22  0.2727  0.80        0.0       5          27   32  \n",
       "3           1  0.24  0.2879  0.75        0.0       3          10   13  \n",
       "4           1  0.24  0.2879  0.75        0.0       0           1    1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rides.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checking out the data\n",
    "\n",
    "This dataset has the number of riders for each hour of each day from January 1 2011 to December 31 2012. The number of riders is split between casual and registered, summed up in the `cnt` column. You can see the first few rows of the data above.\n",
    "\n",
    "Below is a plot showing the number of bike riders over the first 10 days or so in the data set. (Some days don't have exactly 24 entries in the data set, so it's not exactly 10 days.) You can see the hourly rentals here. This data is pretty complicated! The weekends have lower over all ridership and there are spikes when people are biking to and from work during the week. Looking at the data above, we also have information about temperature, humidity, and windspeed, all of these likely affecting the number of riders. You'll be trying to capture all this with your model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7a87918668>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAvgAAAIPCAYAAAAGtapCAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAWJQAAFiUBSVIk8AAAIABJREFUeJzsvXmUZFd95/m9sWRmVdaiKpWghJCQhYVZbMxieYA5xwZs\nY9HjNsyYNrSPGWDaeMAYNxj3TI+Nu3G78fE50DbeABt70PHQbsAwwIDBdrOIxSwCCbNJSGgp7Vvt\nWZlZmbHc+SPjRdx7494XLzLu9iK+n3PqZFQuES8iXrz3e9/7/X1/QkoJQgghhBBCyHzQSL0BhBBC\nCCGEEH+wwCeEEEIIIWSOYIFPCCGEEELIHMECnxBCCCGEkDmCBT4hhBBCCCFzBAt8QgghhBBC5ggW\n+IQQQgghhMwRLPAJIYQQQgiZI1jgE0IIIYQQMkewwCeEEEIIIWSOYIFPCCGEEELIHMECnxBCCCGE\nkDmCBT4hhBBCCCFzBAt8QgghhBBC5ggW+IQQQgghhMwRLPAJIYQQQgiZI1qpNyB3hBB3ADgA4Fji\nTSGEEEIIIfPL5QDOSim/b9Y7YoE/mQN79uw5/IQnPOFw6g0hhBBCCCHzyU033YTNzU0v98UCfzLH\nnvCEJxy+/vrrU28HIYQQQgiZU57+9KfjhhtuOObjvujBJ4QQQgghZI5ggU8IIYQQQsgcwQKfEEII\nIYSQOYIFPiGEEEIIIXMEC3xCCCGEEELmCBb4hBBCCCGEzBEs8AkhhBBCCJkjmINPCCGEEDIH9Pt9\nnDx5Emtra9ja2oKUMvUmLSxCCCwvL2P//v04fPgwGo24mjoLfEIIIYSQmtPv93H33XdjY2Mj9aYQ\nAFJKnD9/HufPn8f6+jouvfTSqEU+C3xCCCGEkJpz8uRJbGxsoNVq4ejRo1hdXY2uGpMR/X4f6+vr\neOCBB7CxsYGTJ0/iyJEj0R6f7zwhhBBCSM1ZW1sDABw9ehT79+9ncZ+YRqOB/fv34+jRowBG70+0\nx4/6aIQQQgghxDtbW1sAgNXV1cRbQlSK96N4f2LBAp8QQgghpOYUDbVU7vNCCAEA0RueuRcQQggh\nhBASgKLAjw0LfEIIIYQQQuYIFviEEEKiwmxuQggJCwt8Qggh0XjbJ2/BVW/+JP76S8dSbwohhMwt\nLPAJIYRE4Xynhz/7zK04fm4bf/yp76XeHEIImYprrrkGQghcc801qTdlIizwCSGERGGr20ent2PP\nOXu+m3hrCCFkfmGBTwghJAr9/sh73+vTh08IIQUPnT2Pk+vb3u6PBT4hhJAodI0Cn822hJBQXHfd\ndXjxi1+MSy65BMvLy7j44ovxvOc9D+9///sBAMeOHYMQAi9/+ctx7NgxvOQlL8GRI0ewsrKCH/mR\nH8HHPvYx7f6e/exn4xWveAUA4BWveAWEEMN/x44dm3l7bz++jvtOb858PwUtb/dECCGElNA3Cvpe\nX6LVTJMRTQiZX971rnfh1a9+NZrNJn72Z38WV155JR566CF87Wtfw9vf/nb8/M///PB377zzTvzo\nj/4orrjiCrz0pS/FyZMn8b73vQ8veMEL8MlPfhLPec5zAAAvf/nLccEFF+AjH/kIXvCCF+ApT3nK\n8D4uuOCCmbe573lVkwU+IYSQKJi2nG5fotVMtDGEkLnkxhtvxK/8yq/gwIED+PznP48nPelJ2s/v\nuece7f/XXnst3vSmN+E//sf/OPzeL/zCL+Dqq6/GW97yFq3AB4CPfOQjeOELXzj8vy+6LPAJIYTU\nEbPApw+fkHhc/u//LvUmVObY7/9Pu/7bd7zjHeh2u/jt3/7tseIeAB796Edr/3/MYx6DN77xjdr3\nfvqnfxqXXXYZrrvuul1vx7T0PFsW6cEnhBASBdOi41uxIoSQL3/5ywCA5z//+ZV+/ylPeQqazfGl\nxEsvvRSnTp3yum1l+LbosMAnhBASBbOgp4JPCPHN6dOnAQCXXHJJpd93+edbrRb6/b637ZoELTqE\nEEJqialQdSOePAlZdGaxvdSJomC/99578fjHPz7x1lSHCj4hhJBaYnpMqeATQnzzjGc8AwDwiU98\nwvt9F1aeXq/n/b7pwSeEkAnceN9ZnN7wNzCE+GEsRafHAp8Q4pdXv/rVaLVa+N3f/V3ceOONYz83\nU3Sm4cILLwQA3HXXXbu+Dxe+BQ9adAghc8Vff+kY/sNHvoP9yy184d8/Fwf3tFNvEhlgOnLYZEsI\n8c0Tn/hEvP3tb8erXvUqPPWpT8ULXvACXHnllThx4gS++tWv4sCBA/jMZz6zq/t+5jOfib179+Jt\nb3sbTpw4gaNHjwIAXvva1+LgwYMzbTcLfEIIKeEz330IALC21cVXbj+B5z3paOItIgXjFh168Akh\n/nnlK1+JH/zBH8Rb3/pWXHvttfjwhz+MI0eO4MlPfjJ+6Zd+adf3e+jQIXzwgx/E7/zO7+Caa67B\n+vo6AOAXf/EXWeATQkhIVFV4fbubcEuIiVnQU8EnhITimc98Jj74wQ86f3755ZdDlvjer732Wuv3\nr776alx99dWzbt4Yvgt8evAJIXOFepA8t+W/EYrsnp5p0VlAD/6ZzQ5+/xPfxV9+/vbS4oIQslj4\nbrKlgk8ImSu0Av88Ffyc4CRb4D1fvhPv/OxtAIAnXHwA/+P3H0m8RYSQHGBMJiGElKBOS13fYoGf\nE5xkCxw7vj68fYdymxCy2Pg+HrLAJ4TMFbpFhwV+TlDB15fhu6ZniRCysNCDTwghJai2bir4eTGW\ng7+AKTrqMvwirmAQQuyYK5yzwgKfEDJX9Jmiky1U8PWivrOATcaEEDu06BBCSAnqQXKNTbZZYaZE\nLKKC3adFh5CFompaFptsCSGkBE3Bp0UnK8wTWG8BFeyepuCzwCf+EEIAAPoLaH3LmaLAL94fF1Tw\nCSGkhJ6WosMc/Jyggq/PAugs4PMn4VheXgaA4XRVkgfF+1G8Py6o4BNCSAl9puhkC5tsadEh4di/\nfz8A4IEHHsDa2hr6/T6HqSVCSol+v4+1tTU88MADAEbvjwsOuiKEkBI0BZ9NtlnBJlvTorN4z5+E\n4/Dhw1hfX8fGxgbuueee1JtDFPbu3YvDhw+X/o7vFU0W+ISQucKcZCulnOh9JHEYU/AXsMBVFXx6\n8IlPGo0GLr30Upw8eRJra2vY2tqigp8QIQSWl5exf/9+HD58GI1GuWnGt0WHBT4hZK4wc8a3un2s\ntJsJt4gUmDnPi6jgqxc1i3iBQ8LSaDRw5MgRHDlyJPWmkCnxfb1PDz4hZK4wfYxM0skH8wS2kE22\nqoK/gD0IhBA7Pc/Hg2AFvhDiQiHELwkhPiSEuFUIsSmEOCOE+IIQ4t8IIayPLYR4lhDi40KIk4O/\n+aYQ4nVCCKcEJ4R4mRDiOiHEucFjXCuE+JlQz40Qki9mEckknXwwL758n9DqgLbCRAWfEDLAd5Nt\nSAX/XwF4F4D/AcBXALwNwAcB/CCAvwTwfmEYY4UQLwDwOQA/BuBDAP4UwBKAPwTwXtuDCCHeCuAa\nABcPHu89AH4IwEeFEL/q+0kRQvLGtIEwSScfesbV16Ir+IuYIkQIsePbohPSg38LgJ8F8HdSyuFm\nCyF+E8B1AH4OwP+CnaIfQogD2CnQewCeLaX82uD7vw3g0wBeJIR4iZTyvcp9PQvAGwDcBuAqKeWp\nwfffAuB6AG8VQnxMSnks4PMkhGSE6etmgZ8PpmC9iB58VcHf7i7e8yeE2KmNRUdK+Wkp5UfV4n7w\n/QcAvHPw32crP3oRgIsAvLco7ge/fx7AGwf/fbXxMK8afH1zUdwP/uYYgD8DsAzgFbM9E0JInTCT\nCOjBzwfzvaGCTwWfELLDvDTZdgZf1TPvcwdf/97y+58DsAHgWUIIdRRY2d98wvgdQsgCYPoYqeDn\nw7gHfwELfOUkTg8+IaTAtJfOSvSYTCFEC8D/OvivWpj/wODrLebfSCm7Qog7ADwJwBUAbhJCrAK4\nBMA5KeX9lof63uDr4ypu1/WOHz2+yt8TQvLALBqp4OcDc/D1ZXjm4BNCCnyvaKZQ8H8fO422H5dS\n/oPy/YODr2ccf1d8/4Jd/j4hZAFgk22+jE+yXbwCt2fMaSCEEKDmg66EEL+GnabY7wJ4aczHnoSU\n8um27w+U/adF3hxCyC4xiyYW+PkwpuAvYIGrPmUq+ISQAt+WxWgK/iCy8o8A3AjgOVLKk8avFIr7\nQdgpvn96l79PCJlzpJQwbYy06OQDJ9nqz7mzgBYlQoidWlp0hBCvA/AnAL6NneL+Acuv3Tz4OuaZ\nH/j2vw87Tbm3A4CUch3AvQD2CSEuttzflYOvY55+Qsh8YisYz3HQVTaY788iFriaRYcKPiFkgO8m\n2+AFvhDi/8TOoKp/xk5x/5DjVz89+Hq15Wc/BmAvgC9KKbcq/s3zjd8hhMw5tkmAVPDzgZNs9ZP4\nIlqUCCF2amXRGQyp+n3sDJ36CSnl8ZJf/wCA4wBeIoT4EeU+VgD858F/32H8TZGn/1tCiEPK31wO\n4DUAtgC8e4anQAipEbZ6kQV+PvR69ODrFp3Fu8AhhNjxXeAHa7IVQrwMwH/CzmTazwP4NSGE+WvH\npJTXAICU8qwQ4pXYKfSvFUK8F8BJ7EzD/YHB99+n/rGU8otCiD8A8OsAvimE+ACAJQAvBnAYwGs5\nxZaQxcGm4LPJNh+Yg88CnxBipzYFPnY88wDQBPA6x+98FsA1xX+klB8WQvw4gN8C8HMAVgDcip0C\n/o+lHD97SynfIIT4FnYU+18G0AdwA4C3SCk/5uepEELqgN2Dn0+BL6XEZ295GH0p8ezHPQKNxpjo\nMddwkq0xyXYBexAIIXZqU+BLKd8E4E27+Lt/AvAvpvyba6BcKBBCFhNbjnBOFp3Pfe84Xv7urwIA\n/uKlT8fznnQ08RbFhQo+FXxCiB3bCvQspBh0RQghQbBbdPJJ0fn6XadGt+9evARfs55dRAW/z0FX\nhBALtWqyJYSQmOSu4Kvbt4jqtfn+LGKKjnoRSgWfEFLAAp8QQhzYFPzNTi+bYrq74PYMU7FeRA+6\nek3T6UlYWssIIQsIC3xCCHHgOkDm0mirDzlavMKOk2zZh0AIsVO7QVeEEBILl+MjF5uOVuAvoj1l\nwVN0pJQL/xoQQuz4PhawwCeEzA2uFIJcCnzdorN4hd2iq9e2p7uIVi1CyDi2HrJZYIFPCJkb6mXR\nWbzCbjwHf7FeA9v+uYgXeoSQcRiTSQghDlwexvVMojK1BJWA6vWdJ9bxqZsezE4dXvQmW9v+uYgX\neoSQcXwfD0NOsiWEkKi4DpDntjqRt8ROrxdewT+1vo3n/eHnsNXt43U/eSVe95OPC/I4u2HRJ9la\nFfwFew0IIXbYZEsIIQ5cB8hchl11I6TofPPeM9jq7lw8fOF7x4M8xm5ZdA++bQmeCj4hBGBMJiGE\nOHEdIHNpsu1HsOiow6NObWwHeYzdsugJMrYmOnrwCSEAC3xCCHHialLKpcm2G6HJVl0ZOL2RhzWp\nYDwHf7HUa9sFTW59EoTkwNeOncQr//pr+H9vuCf1pkTDd5MtPfiEkLnBFTOWi4KvFrShLDqqCnR6\nswMpJYQQQR5rWsznTAV/8RqNCanCf/rYjfjmPWfwuVsexk898ZHYv9JOvUnBoYJPCCEOco/JVIu5\nTiD1Wi2ae32JtUyeO8BJtjaFLsR+sLndwy/+5Vdw9ds+h1sfOuf9/gkJzf1nzgMAtrr97FYiQ8EC\nnxBCHORu0VEL3BgKPgCcXs/n5DjmwV8w9dp2Ag/xGvz3mx7EF249ju8+sIa/+cpd3u+fkND0DaFi\nEWCBTwghDlxiaC4WHX2SbXgFH8ir0dasZRflxF1g2z9D9GKc3Rxd1J3ezOf9J6QqWr/SghwnGJNJ\nCCEOVAVftZ1nM+gqwknLbFzNqcBf+Bx8ywl8O0CB39MuJBfrNSbzQV87Vi5GI7rv4yELfELI3KCe\nFPYtjzIEcrHo9GKk6JgWnYz8q+a2LVqKTiyLjrZS1F2s15jMBzFmhuREvy/hWcBngU8ImR/UAuqA\nkrqQS4EfY9l5zINPBT8brAV+gIsc9cKJMZykjqirXYtg5fMdkQmwwCeEzBHqQfLgnlGBn4sHvxdB\nlTJPhqcyUvAXfpJtpEFX6oVTCAsQIaGJYWfMiRDHQhb4hJC5QVWID+zJ3KITyJ5SKwV/AZbeVWxN\ndCEU9p7yum7TokNqhpRSO44tghDgu8EWYIFPCJkjVIVYHYyyvtWFDHAAnZYYzY/jKTr5KviL0jxX\nkMSDTwWf1AzzYxKqXyknQqxSsMAnhMwNagG10m5iqbVziOtL4Hwn/UlCbxyLo+DnlKJjbltfuqcP\nzyOxBl0xRYfUGfPCfxEsOiGOgyzwCSFzg1rYNEV+STpa82Ogk5apCOeUomNTsEM0l+WK7SROBZ8Q\nHfOadxEsOvTgE0JICepBstEQWGqODnE5FDoxYjJzzsG3FvgLcPIusDfZhk3RoQef1I1FVPBZ4BNC\nSAlqo1JTCLRbo2lXuRX4oewp5snwTEYKvq2RbBFO3gVM0SFkMqaCvwgefMZkEkJICep5oNkQaDdU\nBT99IWkWs6H91wCwttXN4uIGcCj4GbwvsbCdxEMULz1adEiNoYLvBxb4hJBonN7Yxgeuvwf3n9kM\ncv9qAdVoCLQzs+jEiIm0nQxz8eHHGvSUK1YFP/AqTg4XtoRMwyLOywjxHFuTf4UQQvzw+vf9Mz5z\n88O4/MK9+PQbno1GQ0z+oylQC+gcLTpm8R2iwLedKE5vbOOi/cveH2taFt2Db7UoBc7B79CDT2qG\neUyggr87qOATQqJx/Z2nAADHTmzgxLr/5k8tRach0MrMomMexENYdGyKeC5Z+FaLygKcvAtstXyI\n56/e51YGF7aETIMpfJjBAb44tb6Nt/zDd/G3X7s7yP1PQ4hBV1TwCSHR0HLgAxy01YNkQ2SYomMO\neoqk4OeSpGN7yxdJwbc91xApN1oca68PKSWE8LtaRkgozGI3lDjzzs/dhj//7O0AgMcfPYAfevTB\nII9TBQ66IoTUGn3QU9jittlAdhYds6E0TETi+OuaS5LOoiv49hShEKs4o8eRcrEuokj9MY8Jofbf\nOx5eH97+7gNngzxGVWjRIYTUGtVvHKS4NZpsVYtOiAuKaRnz4EeIyQTyUPCllA4PfvoLr1jY3psY\nqzg52NMIqcpYGEGgAl/9nJzZTCuChDgMssAnhESh35dQj9MhDtpjTbaKRSeHPPBxi04cBT8HD77r\n7V6k4tM29yB0Dj6Qx75PSFXGFfww+6/6OGcTF/ghVvJY4BNCojCWAR+kuB3dbjYElnKz6ERQVu0x\nmekVfNcS9CLZR2LFhI7vZ+n3fUKqEitFR32c06kVfA66IoTUlbHhJSGsCUaTbU4WHZtFJURxaxsc\nlYNFx3UCWyQPvq0HIUTxPabgMyqT1IixAj/QsTsni06I58gCnxASBVOtDpKiY8Rk5mTRsQ85Cl/c\nAXlYdNwK/uIUn7EsOuZrSgWf1IkYvUpAXgW+7eJ/VljgE0KiEMOeoh4kc7PoWBNkIhR3QB4pOq4T\nWOqVlZjY94EAF3kR0poICYW52hfOgz+639QFPptsCSG1xSxkwsdk5mXRsfqvI9gzgEwsOvTgW1+D\nIM3mRoG03V2c15jUH/NYvQgKPptsCSG1pRNhiqtW4BspOqlVTNtJynxNfGArmE9vdCADLAFPg+sk\nvUgefOs+EOEiL/W+T8g0jCn4gcQZ9XOSepWTTbaEkNpiHqRDK/iNhtAGXaX24FvV20gK/navj43t\nnvfHmoaYCv637z2DV7/nerz3uru83/csWPswIuTgp973CZmGVB78lCJIiI8oC3xCSBRMxT5Ecauq\nIE0BtDOy6NjV2zgKPpDepuP04Ac4ef/ex2/CJ779AH7zQ9/CPac2vN//brFOso3hwWeKDqkR44Ou\nwuy/6rGy25dJRZAQfQYs8AkhURgrOgLbU8wUndQ2hVQZ6AWnEy9Bx0zReeDMeQA7w7W+dc8Z7/e/\nW2y7IBV8QnTGB12FV/CBtD58KviEkNoynoMfVsE3LTqpJ6bam2zDFnf7llvD26kVfFcdH0LBV1eL\nbn5wzfv97xargh8kKtWMyVycPgdSf2Ll4JvHnqQFPj34hJC6MpaMEDpFRwjNopOjgh+6wfLCfUvD\n26kVfFchG0KdU/etWzIq8FN58FPv+4RMQ4yBgLb7TXmMpEWHEFJbxlTFIPaU0e1GQ6DdzCcH36ZU\nh1Cv1RPFkX3Lw9unUyv4EXPw1df15gdyL/A5yZYQlfFzBS06u4EFPiEkCjEUfL3JVqClefBTW3TG\nj+ChU3SOKAp+6mm2rqcaxKKiPNixExs430mbIFSQwqYF0INP6kW8QVf645xNWOC7UsZmgQU+ISQK\nMbK5zSbbpayabMe/F9qecXh1pOCnPHkB7mX2EKsY6n32+hK3P7zu/TF2g3WSbRAPPi06pL7EEIOA\n8QuHlAp+iOMgC3xCSBTMIiOIPaW0yTa1Rcei4AdRr0evwf6VUZPtZmIV22XRCe3BB4DvPZSHTcem\n0kXx4NOiQ2rEuILPJtvd0Jr8K4QQMjvjyQgBUnSMJluRUQ5+igZLNUVnM/GgK+ck2yAefH3fysWH\nH82Db9xnansaIdOQYtAVAJzeTNenFMKiwwKfEBIFs8gIXdw2G0BTWaRM7UOO5b9WT4Y5KfjuHPyw\nrwGQT5KO1aJDDz4hGikGXQHAmc1ukMepQoiLGBb4hJAojCn4AQ7aWpNtowHFgp/cohNv0NXoPvev\ntIe3U05pBEpSdDyf2Hp9CfOhcsnCt1p0InjwmaJD6sSYgh/Mg5+PRYdNtoSQ2jI+6Cq8gt/KyKJj\nK2RDrGJ0M7XoxJpka7touvvkJta30qlzBTYFX0r/qxjMwSd1JkYOvpRy7j34LPAJIVGIYdFRD9gN\nIdBu5mPRsSk0IeLf1JPhgYwsOi6FyreC77qQ+95D57w+zm5wFSo+C3Bb4cICn9SJ8dXeEJHK499L\nmTQW4iKGBT4hJApmMRveoiOwlFWKTvwmW92ik1bBdilUvk9srgL/lgwabWMU+LaHYJMtqRPjTbYh\nbGzj95lyGCALfEJIbYneZCtEVhadeB58xaKzko9Fx5mi47vAd7ymOfjwncO+PO6btuefevWKkGkY\na7INMRTR8pE4e74LGcAqUwXm4BNCaosZ3RcmJnN0u9HQLTqpFfwYKTqmPSOnFB2XRce7gu+4vxyS\ndFyNxj4bbW2vJ5tsSZ0wP8NhkrbGPxO9vsS5RL06bLIlhNSWGNnGvRKLTmoVM4ZFR32IhgBWl0YF\nfuoUHeckW8+vgfo6i9Hbn0UWfozXwL6fscAn9SHGoCvXfaZqtGWTLSGktsRo/FMP2o0FtOio99dq\nNLDcGj3/rW4/2ETIKrgn2Xp+DZT96uIDK8PbJ9bT+WsLXCdxn/tmz3JfLPBJnYghBrnuM1mBTwWf\nEFJXxi06IZIRdAW/3crHomMr5n2/BnpMqECjIbCn3Rx+L6VNx/Xydzyf2NRVkZV2Ew1RPL4MYgub\nBtcyvM/VJVvhst1lky2pD+Me/LBikMqZDRb4hBAyFTGSEcwm23ZTTdFJW+TYFGzfFx1do8AHgL1L\nSoGf0Kbjer9tivMsmBc5y63R88/RprXzfZ8pOlTwSb2JYuekgk8IIX4w1erQKTqNBtBuZKTgW56v\n9ymuvfECf6WdR4Efa5Kt+j63mg0stxWbUidPBT+0B59NtqROxBh0xQKfEEI8YSaFxMjBz8miYzuA\nh1TwWxYFf6OTLgtffapq86tvD37PeA3MPoSUuDz4PvcDevBJ3Ykx6Co7Dz6bbAkhdcUsPOLk4I8q\nyeRNtpYDeGgPPpCPRUdVr5eU+NKQOfitpsCSUuCnVrLdg67C5uCzwCd1IkZMpktYSFXgMyaTEFJb\nxnyVIXLw1ZhIIwd/u9dPNsQESJGis1Pg78mkwFcvcNSi2/fJWy2W242G5sHf6iaeBeBM0Qmcg89J\ntqRGmMVuiAtUl7BwOlGBz0FXhJDaYh6kQzdONYVAsyGGSnaox6yKTa33vYqhPf9Bg7GaopMyC199\n7dWi23sfwliTbUYWHYuFCvCbJMQcfFJ34ij4eVl0qOATQmqLeUANbtEZFFC52HRs6q1vBV8vIHcO\n73uX8phm29cK/JAKvm7R0Qv81NN8R7fV7Qqt4LPAJ3XCPFZ2+9L76qvruHN2jjz4rcm/QgipE9+4\n+zQ++o37hif1x1y4ihdfdSlWl9N+3M2CPoxFZ7zAX2o2hsrtdq+PPWha/zY0NmU1hgc/G4uO6sFv\nhfPgmyr5UkYKvnpBt9JuYn3wfvj14DNFh9Qb2z7cl4CSeuz1MRpiZO9MpeCHWF1mgU/IHLGx3cVL\n/+orOHteT0s5t9XFr/3ElYm2agdTrQ5u0RkUuO1WA9ja+V5KJTNVio5u0UmXoqNefKlNtr5TdNRi\nudVsYFl52VMX+Godvxwo4cn2elLBJ3XCtg93+300G/7EGfV4fGjv0nDSNS06hJAsue/05lhxDwA3\n3nc2wdbomAV9iKJDy8EXeVl0ouTgT0rRSZgD71TwPb8n6oVk27ToZJSDv9xW+xA8TrK1vJ5U8Emd\nsAYS+D5OKPd3aHVpePv0HE2ypYJPyBzhWupP7T0Gxi05IYrtnsWioybpJFXwI8RkWhV8zaKTTsHv\nRvLg6xc5DShvf/LPQc/xGvi06NhXipiiQ+qDPXHM7z6srigeVgr8s+c76PclGg2PfqAKcNAVIaQU\nV8F4PrFyCYxvW4hBV2aKDqCrxdtJLTr2ZedQj9GwWnQyabJth/Pg6zGZQrMDpVay1aJCU/ADe/Bp\n0SF1wlbs+i6ATcFh36BHTUpgbSu+EMJBV4TUnF5fBm10NKfFFqRWLgGbRcf/AU0tIgchMvlYdCIv\nO9sm2aZM0ek5PPghL3KaDaFdTCT34Cv7wEorzGvgUj9DeHwJCYH1WBnwONFqCBxYGRlaUiTpUMEn\npMasne/guf/lWlz15k/iS7edCPIYWgGhFDZZKPhmk20ID37GFh1bgeV7e+wpOkpMZiYKfkgP/liT\nbUYpOj27VdHPAAAgAElEQVSHgu9zZcG1IpJy9YqQabBFCntX8Hv6sXKlrQ7Ei/9ZYYFPSI259uaH\nceeJDZzb6uKDN9wT5DHUgnGfEouZhYJvFHI+h/sUqNcQRZNtOxOLjl2VCunB33neuVh09Em2o23y\nf+I2m2zzmWTr8uD73A9cqUS06ZC6YA0kCBwpvBQo1Wo32+OLoAW+EOJFQog/EUJ8XghxVgghhRDv\ncfzu5YOfu/69t+RxXiaEuE4IcU4IcUYIca0Q4mfCPTNCpkdVT0MpqepBcFUr8NOf3M0iJpqCn4lF\nJ0YyxOQUnZQ5+KPbIZtsuyUn7tQefGeB7/Gz4LpYYKMtqQv2oYCej5VSF0PaiXt16pii80YAPwzg\nHIB7ADy+wt98A8CHLd//tu2XhRBvBfCGwf2/C8ASgJcA+KgQ4rVSyj/dxXYT4h31ABVKSVZtMKqC\nn4VFx3jOfQnvaQW2JttcLDrWdBPPvtLJKTopC/zRcw056Eq9v3ZmFh3VpqRaAkKn6Ow8RvpjACFV\nsB0TfM/LyE7Br+Ek29djp/C+FcCPA/hMhb/5Zynlm6rcuRDiWdgp7m8DcJWU8tTg+28BcD2Atwoh\nPialPDb9phPiF7X4DnUA6TgV/AwsOo4Cd9nT8BLT495ojFt0civwpdz5ftPTRY7ZYAroCv5GJ11M\npvrS64Ouwq5i5JSDr57EV9phmmxdq0KpVy8IqUqMmEwzkKCtjMlN8Vmp3aArKeVnpJTfkzLApckO\nrxp8fXNR3A8e9xiAPwOwDOAVgR6bkKlQDyihCk31MTQPfhYKfliLis2eA+gWnZQ2Bbd1wmeCyuh2\nqzkek5m0yVZtMA2UIAPor2e7IbRm1tQXurpNKa6CzyZbUhdi2xkbDaH1BaX4rISY7J5jk+2jhBD/\nuxDiNwdfn1zyu88dfP17y88+YfwOIUlRDyidbphCUy2WVOV2u9dPHpNns6N4LfAt9hwgH4uO6/X3\neWDvagr+oMk2G4uOPUUnZDpGq9nAcjMji47jIsfnfhnjQpKQkERR8A07Y+p5GXX04O+Gnxr8GyKE\nuBbAy6SUdynfWwVwCYBzUsr7LffzvcHXxwXaTkKmQi1wQykEqhK41GxgqdUYHqy2e32seLLD7IbQ\nHnS1eGoo0kUuFh3XCcpng2XPOGkBwF4lJnMjyxz8sE22ag5+apuK3mQbZtCVM0UnkKhAiG/sg648\ne/CNFd+llmLRSXCesDUWz0pOBf4GgN/FToPt7YPvPRnAmwA8B8CnhBBPkVKuD352cPD1jOP+iu9f\nUOXBhRDXO35UpTGYkIn0Ilh0tOEdzR3/cVHUnO/0tMa+2AS36FgiIoF8LDru5kefCr4lBz+XmEzl\neapFd8/zezIek6kq+KktOvbXwKsHnxYdUnOiWHSUz4Op4KcQgubaoiOlfEhK+R+klDdIKU8P/n0O\nwPMAfAXA9wP4pbRbScjuUXPfYzTZtpqN5MM7VGzP2efroGfgj27nYtFxFXGhppgWCv5Ku4HCsbTd\n7QdZCq6CNuRJVa+DKvgNIwc/JwVf3S+ZokNIgS1RJmycbvqYzNo12fpAStkF8JeD//6Y8qNCoT8I\nO8X3T1d8nKfb/gH47tQbTYiFnpaiE8iDbzYYKkXE+YT2DCC8r9LVZNtqqjn4KVN07N/3qUypr2eR\nIiSE0BttE+0Hrkm2/k/cuoK/lG2KjtpkG+YiTyW1PYmQqlhXe4OmbenHpO0EK70hYjKzL/AHPDz4\nulp8Y2DVuRfAPiHExZa/uXLw9ZbA20ZIJbQc/EAnW61xqAYKvt8BP+MRkYCu4Kc4cBfEmDBqLjsX\n6DadNFGZbg++51kAWvydnoOf2qai5+Crg67CXOSpUMEndcEuBoWbGZKDgu/bqgjUp8B/xuDr7cb3\nPz34erXlb55v/A4hSYkRk6lbdPJS8K05+B4ParpFZ1Tcph5gUuBssvWaomNfxVCTdM5vp3kNNPtQ\nUwxtQ8XAM1+Y6Ri6RSfxKpbDphRDwWeBT+qCTc0OGZPZMla7kxT486zgCyGeJoQY2x4hxE9gZ2AW\nALzH+PE7B19/SwhxSPmbywG8BsAWgHd731hCdoEWkxksB1+16OSl4NsKWa/+c5dFp5GHRceVkhCq\nuFOfdw7DrswmaO198Vngq6sYTT1FJ6VFR0oJdRcIlSTkbrJlig6pB/YUnZAWnQwm2QZ4yKApOkKI\nFwJ44eC/RwdfnymEuGZw+7iU8jcGt/8AwJVCiC9iZ/otsJOiU+TY/7aU8ovq/UspvyiE+AMAvw7g\nm0KIDwBYAvBiAIcBvJZTbEkuqAcN32rE8DEynuJpK679KviK/9yRg5+yyHG95z5PXOayc0EOSTqm\n57XZEMP3P9xroKdjpLzI1QbriHDxre6YTCr4pB7EyME3xRCJtJNsfceAAuFjMp8C4GXG964Y/AOA\nOwEUBf7/A+B/BnAVduw1bQAPAng/gD+VUn7e9gBSyjcIIb6FHcX+lwH0AdwA4C1Syo/5eyqEzIZ6\nQAnlBS6LCExp0en3JWzH51AZ8KqCn1qZKYgRk+lS8HWLTqImW6lfgO1Eme68HzsrOX4iXNULqXaz\nkU0Ovnnhoce3MiaTkILYHvxGQ2jnjDQKfs1y8KWUb8JOjn2V3/0rAH+1y8e5BsA1u/lbQmLRjWHR\nybTJNob/PHeLjrp9rYYYPne/jcb210AbdpWFgq+fUP0q+HqjcS4e/LELnGaYJltXsx49+KQuRMnB\nN44TrcQrfSHSi7Px4BMy76iFXF+GuWLXE0TyUfBd6ovfHHzdAlGg5+CnTNGxRyT6vMjpV1DwU02z\nVV/6RkOE8+Abzbz6oKs8VnB2CgpFMQz0/BWnGmMySW2I4cEfs/IlTtvyvUIBsMAnJBpmERNCUdMz\nwPNR8F2FtVfl0qHgtzOJSVSf63Ig25B20mraYzKTWXSMAjeYgm/EZC5lUuBrKU8NgXZDVfDDWNX2\naFn7bLIl9cCaouO5wDePR8uqEJRk0JX/+2SBT0gkzGI2RLFZFpOZ0p7gKuBCTXHVmmxzsei4FHyv\nHnx7Dr6WopMoB1+bUyBCKvjG0ntDDFd0en2ZbB8wL0DbrfAe/D2BhmkREgopZXwFv9nQPo8phKC5\njskkZN4ZU/ADqARmTOayqtwmTNFxFVWhcvBdg66SWnTUDHR1yJHHixxnik4GFh1TwVZXGHwOedEU\n/GYDQug+/FSrOFoPwrDJeIdQF3nqhSQtOqQOxJrjYH4el5rpLoZdFzWzwgKfkEiYMVghik3Tf7yS\niYLvbrINn4MfKo5wWtQDuD7kKEKKTgYWHfP90Qpcj/tBx/gMAMgiC19rsm0ItDUPfiAFf4kKPqkX\nLiU7pILfMj6PsS+GQzTYAizwCYlGDA++ep/NhshIwY8bEakV+Injzwq6mrIaXsFvOC066VN0GoZF\nx+fJ22ZTyiELv2sq+KFSdBwWHcZkkjrgtnOGy8Efb7KNu9KrngPUxvhZYYFPSCRiePDHMsAzUfBd\nCqXPwkZVSJuOQVcpLTrqS6A32YaJSNRTdJSYzFQWHUPBb4by4BtNtoCh4Cf6HPSNgkK/8AyTokMF\nn9QNV4EfcpJtq2kU+JGPEfrp0V+FzwKfkEiYSm3oFJ2WoeDnEhGoEqzJNkOLjvpcVYuOz4scVw5+\nDhYdM8JVjYkMNcl2aNFppfeim4qhfuHp8XPQsyv4nS5TdEj+JFPw1YnnkY8Rqi3Jo4DPAp+QWIw3\n2fo/4XYMBX8lkxx8VwHjt8nWoeBnYtHRU3TCWHSqpeikV/AbQmhNwH4V/PHXIIcs/LEeBOUCJ9Sw\nM6bokLrhLPA9779mqtdSoFXVKmghA7ToEFI/zANXCIuOueyYi4LvUqljTHFtJzxwq7hiMkPZMzQF\nP4MUHVMxCzVh2LzIBWBk4ae36DSEYR0L1IOgvu9bLPBJDUhh0TFX1KjgE0KmwizkQjfZthqGBz/p\nJNvwy649I6WkIFQhOS3qc1Xfl1BDjtSUmhwsOrqCjWAefFuztf45yETBD7Rfdl0XkozJJDUgxrnC\nvD/Tgx97tUs9ZrHJlpAaMh6TGcKDr6qXIptJtu4cfH/bpFt0Rt/XlJkMFfzQxS1gWHQ6aQZd6Qp2\nuBQdrQ/F4sFPpWSbKULq+9OX/l4D9yRbFvgkf9Io+I2kSVv6c2OTLSG1w7SpBCnwVQXfSNFJ6cF3\nqjIRYjJTKjMqbotOKAU/Lw9+11hdCJaiY1nFyELBN/ZPIfTGPl/7gfr89y6FsYIREooYgQzm47TG\nYjJp0SGETIFZxGwHbrJtNTJS8F3TCT0etM0mzoJcLDr6oKswGej6+PXR81b3g81UTbZayhEMBd+j\nRUWbZDvIwc/Ag2+7ANUabUMo+EvMwSf1wjXoyudxEjBmhgS62K6Kemz0WeG3Jv8KIcQHpjIRPCaz\nqdsAUimXgLuw9qvgj25rTbYZ5OBLKd3e6EBRobqCPzrUb6Zqsh3LwQ9zkaN+rtpDBT/9ha45BwAI\nc/HpWilKFQ9KyDSkiMlsNYUWxhD7s6I+N58KPgt8QiJhFvRhLDq6PUGpH3A+5aCrCCk6ribblEuv\nBeq5aSdBRVGvvSr4+iTjghwsOtoFWNBJtpYm23a6k3eB+fyBMBef9OCTOhPLg28mjqVU8H0/twJa\ndAiJRAwFX1WDx5psEyr4rgOYz3hAVw5+Dhad8YjIMBnwrhSd5VZjmM6w3e0HO6GU0TcuwELYU8yV\nkqxy8C2D2NTXIIQHf89SHv0nhFQlloLfN44Tbe2zKHXbTGDUY6PwGKPDAp+QSJgn2BCJLj3Nf2w0\n2SZU8F0NUqEiInPLwR/PXA4zfEtXpUbfF0Joam4Km45pHwqh4OtJNaNCOgcPvmbRsSj4vmxKWg5+\noHkLhITCreD7HnRV3vQec7VX/eyzyZaQGjKm4AdQElVFvG022SZU8N0WnUA5+IoKkuqgraL1RjQa\naAUo7IDx6DcV3aYTPyrTVLBDTLLVs63VFYz0nwPbBag+7Mq/gk8PPqkbzkAGzxeoPYudMVXiWt/R\nWDwrLPAJiYR54Iodk7nV7UEGOpBMQj2YqtsUzKKjHNlysOiotVtD6Nvks8m2a6QoqaiJKimSdLQC\nd8yD7+c10BtsR/e/nEEfhtWio+2bYT34TNEhdSCFB781vOAefR5jXhBz0BUhNSdOga8nA7SajeHB\nqy/TLdOrj6sWmqGabFV1eGf5dee2z4FC06CnGzWCWDMAt00JQHqLjpmiEzgisuko8LNQ8Aeb1gqR\ng+/4rNGDT+pAihSd4nyxlMjO6fu5FbDAJyQCUsqxA1cID77WZGsb8pPIf6wW8qF8wS4FXwhhpJXE\nL3TGmmy14tanB1+1ApkK/ig0LUWSToxJtur+1NYsOuk/A7YL0KUAvRjOFB1adEgNiOXBt0UKa1PP\nI35etCZbTrIlpF7YrtBDK/ijiMDRSf58IvXS5Qv2WdyaFhAV1a6RpMA3GizVhBufFzllCv7exMOu\nxnPw9dQKL4/hVPAzyMG3XIBqvRgB+hBW2GRLaoZ6nFgKtNIJ2I8VeqRyvGOkdlFDiw4h9cKmSvhW\n1MyIwMJPuJKBeuks8L022Y5uN4ziNnWSjnnhpXo9Q9mUWkaTbUoPfr8vobZ/mH0IQTz4qoKfQw6+\nZdCVlqbkabu0FB1jkm2qHhxCquLq1/JtYzFTdAAjkCHApHkXmgff4/2ywCckAjEUfFvsF6Ar+KnU\nS92iE8Yuo6UimAq+pgSltegUvRHD7fGZg69eSDRNi46SohPZg28Wt0LESNFxePBTWXQMixJgpuj4\nfw3aSg+O+TNCckQ9PKsX5mE9+DYFP1GTrcf7ZYFPSARsRaVvD74rQUXLwk/QXAmUWXR82lNGt017\nimrRSZEmYlp0QlmGbMkQBSst1aoVucC32Kc0BT9ABry6DyxlMOiqb1XwlQLfm4Kv7wOpfMWE7Ab1\nM6wq6t5z8NXEOYuCH9PKSYsOITUmjoLvsifkoODbG/98qunmpFSV1BYdUy1Si89YKTorihq2FbnA\n19+bna/NAMqy1mSrTfJNn4Ov2bSExaITYJJtyKFqhIRA3X+XA9k5gZ1EtQLbBXeymEw22RJSL2wH\nJ+8FvhGRWZCdgr8UpvGvtMk2sUXH9OC3AlgzgAkKfsJm64kKfsyYzAwm2Q5z8APsB6aCn8p2QMhu\nUPdf9XPrPwdfHz4IJLTocNAVIfXFlhbju8DvWA5YgF7Y5eDBV60ioVJ0TAW/ldqiU6Kqem2yrZiD\nn9SiYylu/Sn46iqWPUUn3aCr0W2rJcDDZ9OM4202zIhYevBJ3rgK/JAe/OJ0qRX4HHRFCKmCTX3w\n3aXf1TLAXUN+0iv4e5bCRJ/1pVvBTzXApEBPt9FjMn2+Bl2HBx3QLTqxB11ZC/wAKTq2ZAzA8OCn\nGnRlU/A1m9Ls22W+zkLoCj6z8Enu6AV+GDFo5/7GE8eWsrDo+IMFPiERsBWVsSw6WSj4anSfms0d\nKgffOLJphVQSBV8vvDVfdLDXICOLjqXBNIQHX/8MuAZdZZCDX3jwNUvA7K+B7QJH8xXTokMyRz2G\nqRenvhrxAXtsr/l4MftV+rToEFJfrDn4kSw6yxmol2rhFS4Hv6TJNnGRoyccNXR7ilcF352Drw08\ni+xDV69hiohI9SLUl79WbzRXVrHUBuMMYjJtuds+Ljxzms5JyG5Qj+OhLDrmiqqwNL3H/Kyo5wDh\n0aPDAp+QCNiK+aAKfkNV8JUm20TFTcdR4Pu0y9gU0oKcLDqNRpgGU5cqVbCSsNk6moKvFdH2FJ1U\nRa7WZGtpNPZxPLAP72GKDqkPmkUnUA6+a6UzlYLPJltCaozVg++50FQPSLo9IX1EYM9h0fHbZDu6\nbdpT0lt0dGW9HSBv2UzQMZUgddBV7P2g1xs/oYbIwdf6UDLLwe9aLGS+41snKfhssiW54/TgB5oX\nop4r1M9KzONEnx58QuqLNQff8wFEPTC6mmxTxWSqEYChLDq2QUIFIQrqaTBPKKo9xZcyVea/B/T0\nouhNtlYFP8AkW+W9dcdkprrIHV9d8D3wTG+yHjxG4n2fkGnQPPjaoCuPCr5FcADSxWRqxz+m6BBS\nL2zqQ8hBV7pFJ4MmW+W5qik6Pl+DsgLXdzPjtPSNbVOHMPl6DUxfqclKLjGZFnuKr5WcrnaRO3qN\nWw0xtCz1+jLJKk7fpuB7Lr5tCn6q6D9CdkM3gkXHda5c1mJr450nVHGKCj4hNSNKk22lBJH0DYZ6\nDn6gJltz0FVii06pgu/pgsOlShVovRhJJ9mG9OCrNrXR/Qshkmfh9ywxrr6brc2BakD6BnNCpiHG\noCt9RXH0GPpnJd4xUs/BZ5MtIbXCNqXStx/WlYOfMh6xwNVk2+tLSE8NRqZKrpLapmAqq7pFx5d6\nbe/BKMh6km0AD765D6TOwlf3z8aw+PY7gE29kCr2saUWm2xJfXDFZHY9nitsK13m48XsV/E9pbeA\nBT4hEbAN8vGtplWKyUyk4JvKqp4eEsCDbir4iVN0ukZxp1t0/Jy4JnrwEyr4tinDoVN02mZMaGIf\nvk3B1wqYCDn4LPBJ7piBBOpxwlucrkMISBUpy0FXhNQY28k7VkzmslbYpc/B38mB969gl+bge25m\nnJa+oRg1FE844OfEZabomOTiwbelu3ibZKs22Tb11yB1Fr66240m2Yb34LcT+YoJ2Q2mUBFCCKgS\nkxlTBNBiMtlkS0i9iJGi0+3Z/ceq5z2dgq9bB0wF2wdlk2xTq5g2ZVXzX3s4cWkqucXHqRX4kRVs\n28VXeAXfKPATZ+Gb04wB/xYd9UK6YVklSPX5J6QqZuJWiJkhLjEkWQ5+jwo+IbXFWuD7zsHXimjF\notNOa00AjIuPsSZTTwp+SYGb2qKjFXfF1MSAQ45azbwUfH0I2c7XICduR6M5oEfuJbHoKA9pU9d9\nWHR6ln1g33Jr+L31bRb4JG9iKPiuSOWlVBYdpugQUl9sRex2r++tach8DLV4VBX8VDn4Znyhb/Ua\nmJCDn9iioxV3zTAJKjaFWMWcZOtz35uEbUlcO3H7arItsSmltujYJtn6Xlmy5eCrBf65892ZH4OQ\nkJhW0xBDCl0e/GQKvpaDzxQdQmqFq4j1m+2bs4Jv5sD7L7hLm2yTp+iU2zM6Hjzokzz4rWZj+P2+\njBuZaIswVfdRH88fcNvUAKPJNkEviu0iR93GUJNs1QJ/7Xxn5scgJCTmhXArwLArlwefTbaEkKlx\nHZh8FpuumMzlVgYxmUoB124K7+o1YG9iHD6m57SSadGL751t8a1g6xdR9kP7nkRRmTbrSDvALIBO\n3/0aLLfSDnyz9SEseVfwxwuXfStKgb9FBZ/kTVniWpB5GRlMsu0FWk1lgU9IBFxLiz5TLbqOmMyV\nxNYEYDz6LESKTt8SQzh6TL/NjNNi6w9Q3yPv/muLgg8Ay+pU44h2rUnP398qjt2mBqRLyCjoW1aY\nNA++h8+BbR/YT4sOqRHqocD04IdW8JN58NUmW6boEFIvXMqDz2JTn2RrV/BTWBMAm0UndIqOu7hL\nPujKomD7tujYPPiAmYUf73Ww9UdoCn6EJtvU8yBsKU+aRcfDxf4kBf8cFXySOWYgQQgF3xScCtSh\ncFTwCSGVcCm0fi06qg3G5cFPo+B3jG1rBbBn9Ety8H2r5dMyMSbTwzZpU0ydBb4alRlTwR/dblo8\n+N6a58qabFNbdCyrGJrn10sO/rj1QGuyZYFPMqdMwQ+RuKYr+KNjREwhqK958NlkS0itcCkPXgt8\nx0ErBwXfVLBDNFiWN9mmtejY7Bn6NF+/GehVFPzNiJGJtkm2IaYZlzbZJm42V1U6ax+Cj1UcSx/G\n/hVadEh9MAMJ2gES11znyraq4Ec8RqjbQ4sOITXDNanTZ4GvqeRqTKZqy8hAwW8ZKTr+mmyrWnTy\nUPDbntMhbDYgkz2JsvAnTlj19DnolCj4qfy1BZMUfB8WHXuKTnv4PTbZktxRD88pPfgxzxN9WnQI\nqS+ug8W2zyZbh//YPGj5OkhOg158mhadAE22pRadxB58S0SiF/XWkoFukmqarS1BJoQHv1fmwc8o\nBz9GVGpzcN9U8EmdMBX8MCk6diEgi5hMKviE1IsoMZkOBVcIkbzB0FRWNeUyiCqj/0wrpBIU+F2L\nRcV3o3GlFJ1EQ8+sFqUgCr49/g5Ib1WzWch8r2LY9oG9S81h0bDZ6SXZ/wmpijnoSlfww3rwlxMl\nbfmch6PCAp+QCLjUuWBNtoaCu9JOW9x0DYtOiOmEao3cMD34Wr5x/BUMWwOs70bjrsUCYqKn6KSx\n6FhTdALYtEoHXSWx6IxuNyw2Jd/7QPE6CyG0Rtt12nRIxowNugqcuKYeJ1KlrbHJlpAa03NZdCIo\n+EDa4qbfl1AFimbDaLL1laJT4sFvJ7bo2BpgfTcaV1HwV1J58G2TbNX3xNskW3v8HaB/BlJ48G1z\nGlqeV5ZsKTqAnoW/RpsOyRjzPKZ+RnzZS9XjjSqGJLPoqE+LFh1C6oU7Rcefmqw1sjbdCn7Mwg7Q\nn3u7KSCE8J4eAtibGNXHLUiTg6/7SgF4bzS2+a9NUk2y7VvsU/p7IiE9NJqZzdwqqW1qNnXdd+Ov\n/hij+2YWPqkLPWMfbgbw4LvEkFQKvnp+8Fjfs8AnJAauIrbjUSVQi0RzimdKBb9rKW5D5NKXpei0\nE6fo9CwWHf/+a3dxW5DKomMrPIXwn5BhNnOrpM7Bt60wtTxHALoKF2bhk7pg9qq0AnjwXRfCZkNv\n39MFxSS0JluP98sCn5AIxGiy7VgK6YLlRIUdYCj4g4Opb2sCoBfRZRad1JNsixNK27NlpFoOfiIF\nX44r+ID/LPxOmU0tdQ7+hD6EkLMQ9q2MojKZpENyxvycNAOIQX3HhbAQQlPxY81M0R6GFh1C6oUz\nJtNrk61qhTEsOgnVSz2+czxBxteya7/MotPyf0ExDXrhtfPVtz1jag9+1Em24/5zwFjF8NKH4F7F\n0F/v+BYdWx+CmaQ0q03JtQ9oHnwq+CRjzAI/dEymaWdc9jxdugq6RYdNtoTUClfOrU+7iGqFKVcv\nIyv4PXVlYVzB95eiU6Lge04rmRZ923a2xbdSZHsME9WqlXqSLeA/SadT1mSbWMG3WXQaRgzgrAWM\nq3BhFj6pC2avSivEvIyyqecJmvFDnZJY4BMSAfXApDY6+p1k6y5uVlpprBnAeJPtztew0WdjB+1G\nfFVGxaas+k51qaLg71lSV3Ii5uBbEmQAw4PuxaJScpGbOgffYVPyeZFji2MFdA/+2vnOTI9BSEjM\ngXDhPfjulb5Yq719hwA4KyzwCYmAWnjsXQpT4PcshXRBWgV/3KKjL7t6mmSrqcT6z1SLToqIRGuC\nimcFv5IHP9GFnktZVpvBfQw8K7vIUS+oYtqTClwWMp8Xn/o+wBQdUj/GB12FCGRwW/lSnCu6TNEh\npL6oBY7qg/Z5ACmNyUyo4OvTRQuLTgAFv6JFJ0mTraX4Tu7BTzzJFvCv4HfK+lBSD3tzqIZtj9F8\nrsJlH3PwSU0oU/D9WXRGt00PfhoFP8z9ssCfA7a7fXz59hM4vbGdelOIA7eC79GDXxaTmVDBtxWe\nYaaYjm6bFp2lxEOObBcfvoeqVMnBTzfJdnRbLW5bRhb+7I/jvsjTnnuKJlvHtulTnT168NUmWyr4\npCaY+3AziAe/pBk/QSCFpuB79Oi0Jv8KyZ3f+eh38F+/chceeWAZn/s/nqN5TUkeuBR8nwqB3mTr\nzgCPruBbVhZCTDE1lR+VpQArBtNgu8jx3mRbKQd/tB9sJp5kC5hpSh4UfOU+xmxq6mcgYoNxgWv/\n9Lm65LqI2LfMmExSD8xmdFWs6nk6X7py8AFgSTlusMmWJOXhtS2876t3AwAePLuFm+5fS7xFxEYv\nQoHfsXjdC1JO8TQ9lYB/5RYoV2+XjOgzH1NTp6Gr9QdYCnzfCr5DBUqWg+9Sr9X9oDv7e+LyoANm\nRMK75dsAACAASURBVGjiHHwtKtRfhGvXYdOiB5/UBfM41gwQqVwWyLCUYCii1mTr8X5Z4NecD339\nHm2nP762lXBriAu18FAtOl5z8EuXHZWDlodCahq0omOYouM/JrNvKaLV/6uPGTtJxzZYxb+CPzkm\nM49JtiFz8N19CKmee4FamzScCr6/HPymy4PPAp9kzFgOvnLc9jHtGrCfkwp8Wyen3R4OuiIAACnl\nUL0vOH6OBX6OqMW3FpPpsdjulsRk6gp2uhz84STbEKqMI4qxwHdT6zR0LVOGlwN68M2TVoHWaBrx\nNXDbU3zn4KsWnRIFv9OLvopTadjXzAq+/SJfz8FnTCbJl/FJtv49+K4VRcBU8BPEZHq8Xxb4NeaG\nu07htofXte89TAU/S7Qc/EAxmXpxk0+TqU299WlLKCiz6ABpBpgU2Io73+/JpOcPGB78RIOutBQd\nLQIv7GvQbjaGRW9fxu/FcG2bz8+CaxVHLfCZokNyxrSZ+WxCdz2GinrBHUsEUcUpn022LPBrjKne\nA1Twc0U9MIUadKXZEwz1MsWyY4FNWW4FmCzbdzRyFqRstO1ZXgPvKTqWXgeTlURZ8K5JtpoH34M6\nV3aRC6RrMgbKpvn62y9d+4Bq0aEHn+SMdhxvCE0E8DXoqrRfy7N1ctrt8QkL/JpybquLj33z/rHv\nHz/HqMwcUT/AaoHv8wDSKSnwUhy0CroW24S6fT6818BkBTvlKoZNWfW9FNyz2IBM1NWjqDn4mn1q\n9P225xz8sgmVgO7D34pd4DumzLY89qO4PgOrS6MCf2O7F6ygIGRWtGnUhgffl0XHZpksUK2TnVgK\nPi06ROXj37wfG4MldvVkQYtOnqhFbLAc/L7bf6wXt+mabG0Z8D4UfCml3sRoOUrqFzmR+xAmWXR8\nFPiOAlLFHHgWy4deJQPex2dBfZ3NzwCQNi7WOcm26W8/cPVhNBqCKj6pBepx3PTg+7ownWTlK0ii\n4LPJlnzh1uPD2y986iXD27To5IkWk6kW+B4Vgm7FmMz4Cr5adI3HZPrIP9fsD8LuY1xK4K0ssJ1Q\nfG9PlRSdRkMkeR1c2+Z7wrCp/ploKxixB75VyMGf9WK3rHBhgU/qgKmu+xYBgPK0rRRNtlTwicZd\nJzeGt3/yCY8Y3n6YBX6WaDGZwXLwx9NqCvQEmdjqtVp0jafoeJlgWjLkqmA5E4tOcXHjPQe/ggcf\n0Kcax7Lp6IXn6Ps+L/T6fTmm/pmkjMqMk4PvvsDRsvDZaEsyRT0MjCv44QddpehX05psPZb4LPBr\nyj2nRgX+D15ycHgwXzvfTZLxTMrRYjKD5eArB60Msn0LbIWn7xx89bhva7Ddecw8Cvxi+3xfcFRJ\n0QHSDLtyTrL12WBqqHK2VRzVohQzRQgw5zSMvq82nM/aaFy2iqMr+IzKJHmiKfhC6IEMASw6ZQp+\nrBXOPi06pGBjuztspm01BC4+uAcX7lsa/pw2nfyIMcm2TMFN2mSrqoq2FB0PB+0qCn6KCYUFtlg2\n317PKjn4gN7kHUsMcOVO+8zBnzYmNPY0W9c+uuSxqa8s/o9RmSR3zF4q06ITYtCVORQxhUWnS4sO\nKbjn1Obw9qMu2INmQ+DIvuXh95ikkx8dbZJty/r9mR+jYpNt7Em2WrrPYLvaDX+2BKB89HhByiZb\nqwffe4pOVQU/flRmzzhpF+gDz2Z7Dcr2/4JcLDqNQBadsn1AG3ZFDz7JEFsvVYhBV70yMUydeJ5C\nwfdI0AJfCPEiIcSfCCE+L4Q4K4SQQoj3TPibZwkhPi6EOCmE2BRCfFMI8TohRLPkb14mhLhOCHFO\nCHFGCHGtEOJn/D+jPLhb8d9fengPAOgFPpN0ssMVk+lzyFMhEApRnu27FVnBty2H+s7B75coMgUp\nJ9lG8eAbS9suklh0HLF0Wg6+zwz4CpN8Uxb4ekymP4tO2SqeatGhgk9yRF+BGo9U9mHnBMpXfJM0\n2WqDrvzdb2gF/40AfhXAUwDcO+mXhRAvAPA5AD8G4EMA/hTAEoA/BPBex9+8FcA1AC4G8C4A7wHw\nQwA+KoT41ZmfQYZoBf6hvQCAi/arCj4L/NxQDxSaB99ToalFZFoSVFIWtx0t2WRw0PY84Ghai07s\nFB1rTKbn96Sygp/Ah+5uMPWXg1/WYFqgFvhbEWMybdaDAp8WnfIUnfbwdt2bbLu9Pt744W/hFe++\nTjsfknrTtxzHgyj4FSfZxjpX6had+jTZvh7A4wAcAPDqsl8UQhzAToHeA/BsKeW/kVL+O+xcHHwJ\nwIuEEC8x/uZZAN4A4DYAT5ZSvl5K+RoATwdwEsBbhRCXe31GGXC3YtG59PBOga8q+MzCz4/QCv4k\n9VJv6EyXAV/YEdSLED9NthUK/IQXObYTl38Fv5oHfzmFRUdtgnbm4M9Y4PfG1T8T1aITc5Kt1kNn\nxLhqCuWMNiVbv0uBmqKzVnOLzvu+djfe8+W78JmbH8Yffep7qTeHeGLSzJQQHvwcJtnW0qIjpfyM\nlPJ7sto0lRcBuAjAe6WUX1Pu4zx2VgKA8YuEVw2+vllKeUr5m2MA/gzAMoBX7HLzs0VVLB59qLDo\nsMk2V6SU2gFlT4BBV5MiElMM7yiwqYotj82VgKHgV/DgR2+ytaxiaHn03j347kO7rmJHarJ1vD8t\njyk6lZpsW2ksOmU9Im2P+2XZPrB/eX5iMt//1buHt7967GTCLSE+sQk1YRR89yRbXQiKc56oq0Vn\nGp47+Pr3lp99DsAGgGcJIZaV75f9zSeM35kbbAq+btFhk21OmI1DywE8fpMaDH2rxdOgWXSKJlvN\nohPHnrKUcBVD2wca49vT6c0+VbZqDv6eJB58V4KMP/VamwNRyYMf73OgXuCYPSI+G87LUnS0HPwa\nx2R+94Gz+MY9Z4b/v/PEBkWtOcGmrAdJ0enlo+D3lf4537Qm/0o0fmDw9RbzB1LKrhDiDgBPAnAF\ngJuEEKsALgFwTkp5v+X+inW7x1V5cCHE9Y4fPb7K38dCSol7bB58WnSyxWwc8j29E5hs0UmrXisW\nneFB23eT7ei2S7xeSrmKIfV9ABgNcSkapLt96SxMKz3GblJ0kgy6siv4s+4HukXJvhOkmmRbquB7\nPB4swiTb9ynqfcE/33UaP/nERybYGuKTSQq+r/Nl33I8LvDZE1OFKv1juyUnBf/g4OsZx8+L71+w\ny9+fC85sdob+yT3t5tCac4RNttlieqNDeMFtjawqKRV82wCutu+IyCktOilTdFwNlrNuk34RUS1F\nJ5YP3VngexxDX2UFQ109i2rRKTmJh7LolCn4dU3R2er28KGvj+d1fP3uU5bfJnXDFkagns9iePBj\n21mrCjO7IScFPylSyqfbvj9Q9p8WeXOc3H1yZM959KE9w2YtrcmWBX5W9IzlwHbLX1FTMKnBMmWD\nqeo/L5prfWZ/A6YFJr8C33VCWWo1hkX2dreP1eWxP535MUxynWQbssG0IFVMpnkMUPHZaFyagz8H\nCv5/v/FBnN4YtxfdcOfpBFtDfDOxXyvyJNsYMZlVZrjslpwU/EJxP+j4efH94pM87e/PBXefUjPw\n9w5vX7CnPfxArJ3vRs94Jm66hj8+jEWnPCLQtKfM6veeBtvFx3JTafT0UGy7mjhV2p6bWqtieizV\nt8en37PXL1/FKVhJoGK7Uo685uBXaDJO5cGPlbttyxEv2L8yismsq4Kv2nNectWlw9vfuOe0N3WX\npMNa4Ef24GvniQhCUFnfzKzkVODfPPg65pkXQrQAfB+ALoDbAUBKuY6dbP19QoiLLfd35eDrmKe/\nzugZ+HuGtxsNwSSdTDGVVT0WT3qJyNKjKMc/1g3jcWN60G355N4jIksO2AXLiab5mtYZNSLR58pK\nldcAAFYS+ND1Anf0fTUu1WdMZtvx/FNNstUGsQlTwffXh9Cz2OEKtCbbGhb4J85t4Qu3HgewkzTy\nq8/9fhw9sAIA2Nju4eYH1lJuHvGArdgNnYNf2mQbocDXwgFafkvynAr8Tw++Xm352Y8B2Avgi1JK\ntXIt+5vnG78zF7gUfMCYZssknWwwD1pC6D58HykyVaZ4pmq01betMbYtVVYUvnbsJF7zX2/Ax79l\n66c3UkqqePB7aRosTfuQXwW/Wg6+GhUZa9hT36Gu63Gpsxb4ky06e1JZdBwXOIBuV5t1HyibZlz3\nJtv7z5wfroRd+Yh9ePShvXjaY0YtdvTh1x/bvJCW55kpQPlQvBApd6XbUjH9bDfkVOB/AMBxAC8R\nQvxI8U0hxAqA/zz47zuMv3nn4OtvCSEOKX9zOYDXANgC8O5A25sE3YNfUuAzSScbbIVH26M1AdAv\nElz2jFQe9I7lANZsiKFVpUiQKeM3P/Qt/N237se/+9tvWKevVorJTNSHULYE67XJdhce/FiTbG3N\nc4CRIDOjOldmTylIZtGpmKLjVcGfkKITarhOKNSG8OK5PPXS4WmfPvw5wLYK2Qxg0XFNlQbiT7LV\n4339luRBm2yFEC8E8MLBf48Ovj5TCHHN4PZxKeVvAICU8qwQ4pXYKfSvFUK8FzvTaH8WOxGaHwDw\nPvX+pZRfFEL8AYBfB/BNIcQHACwBeDGAwwBeOxh6NTfoCv4e7WcXMUknS2yFR7vVAAbFVafb3xnJ\nNstjqPYEl4KfqMDtOZofl1qNYZHV6fWdBzcpJW57eB0AsL7dw4n1LTx6Sb+47ZXkjKuPVxD3+cdZ\nDnYV0SYrSSbZjs8BAPR9dWYFv1KTbaJJto5JvoDfmMyyi8lmQ2DvUhMbg+PO+nZX8+XnzoZyMbp3\naad0oYI/X9gU/HaAJttuiSAWu8nWnN9x3uN9h07ReQqAlxnfu2LwDwDuBPAbxQ+klB8WQvw4gN8C\n8HMAVgDcip0C/o9tE3GllG8QQnwLO4r9LwPoA7gBwFuklB/z+3TS0u9L3GMZclVwhFn4WWLr2Pfd\naGublGqSTMF3KKtLzVGBv93tY+/S2J8CAM5udrXXcMOiOmsWEEdtm2IEOVA9scGnRad6ik6CSbZa\nTKbHHPxKMZk5WHTMAt/fap6W1mP5IOxbbg0/P+e26lXgb26PbEXFPIMnPeog2k2BTk/i9ofXcXpj\nGxe4DiQke2xJYCEUfPVzYp4uNctcFAW/vH9uFoJadKSUb5JSipJ/l1v+5p+klP9CSnlISrlHSvlD\nUso/lFI6j8ZSymuklFdJKVellPullD8+b8U9sBN/WexwB/e0ccA4OLPJNk/UAr44WPkeutSp4L/W\nHzNecdM1FIrh9ijFVtmB9MS6vi+vW/zDVYpbfek1ZopQ1bHo4RVsIINJtsrqgpaiE9miEyMho6BX\nsg/EUvCBejfa6gr+zvu40m7iiRcfGH7/63fTplNn7Ck6/qJ0R/dTMugqshBkm/Tui5w8+GQCWoKO\nYc8BTIsOm2xzwdb86NuDPykmE9APXHGLG3uD5XLF7Tm5ru/LVg/+1E22MWMyR7fLhhzF8uAvZzTJ\nVvefz/b8O1WabJcSKfjqPpBoki2g+/DXatZoayvwAeDJjx7ZdL73IJN06oxNCGhqNr7wKTqxe5TU\nz/zSDJPMbbDArxGa/95osAWAi2jRyRK9ybQY9OTXotOxJNWYpErR6TgSfqqmh5wwCvx1q0VndNtV\n3C1rannEFYwyv6fHlZwqCjaQxqKjXryo+6EWGRtwimtBihkAQHlB0fJYwJTta0C6QV8+UIutPe3R\nhcojFGHrlGUIFqkPttVOM1baB2VTv/cttYYBEOvbveA2HX1ODBX8heXY8VGBf9nh8QL/yJw22Z49\n38HffOUufPveM5N/OUMmefC95MBrw7TyarLVtk314FdUr08ZBf7GtsWiM62Cn2gFw6y5ln0q+FVz\n8FvxLTrbyrap+2HL5wVOhYtcTZ2L2WRbsn+2Pb0G/b7U0kFsu4BmUYqYIuQDl4J/werImnp6gyvX\ndcYm1Pic9FxQ1qvSaAitj+P0Zth9ymyy9QkL/Bpx+/H14e0rLlod+7nWZDtHBf7v/d1N+M0PfQs/\n/+dfGiv26oDNG9323Knfq6DepipwXept1bQCU8Gf2GRbJUUnWZNtid9z1gK/RJVSSZGio66YqM9Z\nT8gI6z8HxmMyY010LlPwfb0GZQPVClKtYPhgozPeZAsAh/aOetFOrVPBrzPq/l9cCKvnSl8WnUmJ\nYxco+9SZwKtCtW2yJX657aFzw9uPvWjf2M8v2NNGsa+une96GwqRmuvv3Ik/29ju4ab7zybemunp\nWiw6S75z8CsMumonarJ1FvgVVxRMD/7EJtuMFfzSJluPFp0yBT+FD119bnqB7zFFp0KTcbMhtII6\nVi9KWYyrZtebofm7Sg+GdoET0abmg02Hgn9IUVtPUcG38uDZ83jT//cd/Lfr7kq9KaX0LSKF70AK\nYPJnRd+nwhb4eghFjXLwiT/6fYk7NAV/vMBvNAT2LbWGzVPntrpzERl2enP0ATPV3DpgO5iEjMls\nZ6bgq0WUerCuuj1TN9lWSNGJOsm3bMhRy18kWxUPOpDGouNSqfRm81mbbKv3IHR6O8fIrU5fK3pD\nURbjqg/72v1rUG0FQ1Xw6yUAOS06itp6mh58K2/9h5vxt9ffAwB42mWH8ANH9yfeIju2QVemnVVK\naV2dmupxSibZAjtiaUHoi8ZOhYCM3UIFvybcf/b80DN6aG8bh1fthfsBZcdcq1kMmoszaoFfQ+uR\nzWPny3c7fIwqMZmaRSVegaurt/aYzK2Zm2wrKPjJBn2VKfij12CWAldKubtJthEU/F5/tG1C6Ccx\nPQJv1ibbaifKFCp2WQO0r4ucKj0Yc9NkuzTSJqngT+aGu0ZDwG5/+FzJb6bFNi+j2RDa/jzrcUJK\nWTrJFoDuwQ9e4CviR4sWnYVE/VDa1PuC/UrO8dnz9Vczznf0Lva5VPB9NNlWWOZbTlTg6jFgTeV2\nNfV62iZbV3FTNZbTN7aY1AJf0aXmPlamcJmNvf0ZT5iT2DZWcIQjB39Wi06VJCnAmGYbIQYP0C9A\nxwfr+LHo6BalyU3G9VPwR5/7vW27Ref0ZidaX0Vd6PT6uPPEKKDjXMbxqC6b4ZLHFe8qx0qtryO4\nB19dfaeCv5Do/vvxBtsCtcCfBwVfVe+Beub722KwVCXbTw7+lE2mNWqyNS06tiZbPammyvOPGZPp\nTlDx9Z5U9d8DO69PzJkIZoGvEioDvrJFKdJ+UHYB2vLVZFvFg1/nJluHRWel3Rjuz9vdftR0pDpw\n98kN7fhg62HKBdfMFJ/TZSc12ALAodV4q0JdNtmS2x4e+e9tDbYF6ujxeSzw62jRsfn9vOfgV2gw\nTFXgztpka06ytSn42tKuo7bLI0VH37hlT9tUpclYZU9Eq4arwRbwG4GnDXsriZtLoWL3yi7yPK2s\nVfHgL9e5ybajWnRGz0MIEVVxrRtq7QDkreD3HL0qPo/dVS6EY6bobPcmr7ztFhb4NeH247uw6GzW\n/0BnNk3V0aIzsXHIS5OtogI4Ggx9P2ZVqij4rsJmY7s7VoTZFHz1+efWZFs5RSdwcaei2VRSFvge\nU3Q6FV+DmBc3BTZvcYH2Gsxgl5o2RafeOfh6Pojmw6/hOSIktxme+3Nb+V7YdZ0Kvr9jd5Vj5QV7\nYir4nGS78Nz2kKrguy06BzQFv/4F/nwo+OPFd8gUnWoKfsQC3zHIo4oqc8JiydqwnKB0Bd/+/Hey\nwXduq42foamagT7Le6L+bZVGrZjNlq4LPMDw1s6Yg9+zWOFsLGtJMpEsOspTG0tS8tRkO32KTr6F\nng1XTCbAJJ0yzKbanC06fcc+rNk5Zzx3aYEMjnNlXA8+J9kuNOe2unjg7HkAOzv9pZYptgXz7sG3\nFXy507UcULQcfC+TbCf7+PQ84TjFbb8vtQOYug1Vpvna1JN1W5OtWkA5ihshRJIkHdv49QI1SWiW\n4k69mFePAS5UH3poD36npAHcb5PtLlJ0ohX4JTn4DV2d3G2TaDUPfn1TdFRr3h6jwGeSjhvTopNz\ngd91fE58rj5XUvBjpuj03cfHWWGBXwPuUD6gj7lwb+lOoHnwM/4gV8Us8Ne2urU7MfUsXfK+mxyr\nHLRSKPjqwctMUKmk4FuW23ebgz/2mLEK/JImKl/bo17M71ueXODHVLHLmmzVfbXb331xC0zRZJvY\ng29uW8NTDGCVadb1TtEpU/DjFWR1w1Twc/bg2wZdAdXEoKqU9cMUHFqNqOB31fMDLToLR1X/PTB/\nHnyzwAfGU1Vyx+Yr9H2i7VRo1DHjEWNQZs+oEtt50rJiY1Pwq+TgA0ZUZqRpvq5BX4BxoTeDMqWe\ntHNT8LdK9gEhxFiRv1sqx2QmSJKZdAHqw6aj/p3rIlez6NSoybbXl9p+pO6/gG6poEVnxMn17bEC\n1Xb8zAVXGlzVxLVKj1FhXsYh44IxZPRqlwr+YqNHZJYX+PM26OqMRY2pm01Hj8ncOaD4Hrajq8ST\nm0y3IxW3pf7rChcctos5mwe/6pCnFBYd9bUu86DPpuCrFp12yW/ukIuCD/iz6XQrWnRUe0e0JtsJ\nF6CmTWc3qNaUg3vsF3l1HXSlJei0m2MXMBcwRceKbajVuYzrAlczumZpndHK16vgwV9pN4cXw52e\ntAY7+GK7YvrXbmCBXwNuOz6y6FxR0mALzN+gK5uCf3y9Xo22tsJj2bOKWObzLkhhT3E12FbdHptF\nZ6PTG1NUylJKVNqt2QupaVGf27K5iuHpPTmrnLT3V7HoJPLgmxc4gF7czuKvtc2bsKFfXMe36Nj2\nz7YHhfLBs6Pj4iMPrFh/R1XwYw57m5WyBluAFh0XZoIOkLdFxzXPI5RFx2VlA+Il6XQdPWo+YIFf\nA6ZS8Oe8yRaouYLfsCj4Xiw6k2MylzxGjVWlTMGv0jhli7wzl+uL7xVkp+BXfQ1m2B5Vlatk0Uml\n4FsKfF3BD9+HoFp0Yk2y1Sw6FgVfsynt8rP54CCIAXAX+Mutenrw1ffJbLAF2GTr4najwRYA1jOO\nyXQdx0MNxCs7V8RKZqoaDrAbWOBnTr8vccfxahGZgDnoaj4V/LpFZdri+/Q8ah8WnTxjMjX1dhcN\npq65B2ZhNqmAmuYxfVPmQfflLV3TCvwKFp1WvDz0slUcYHIO/MNrW5U8sGrP0QGHRQVIM+xJs+hY\nzro+CpgqBb7v404sNjqj/dum4HPQlR2bgp9zio5rYJ/PQVdVJtkC8S4aNXGuQsTxNLDAz5x7T28O\nC4QLV5e0pUgbukUn3w9yVawFfs2abDuWxiHNouOhyOhUsCf4Tu6pgl7c6ifmpQoK/kmHHctsFJtU\nQI22IUEfQolFxdeJS72Y3zelgr8VuMjVLTrjxdlSSXH7zs/ehqve/En83Du+qL3HNlRL4sE97ouc\nPQmGPfUmWMh8XOjpBf6y9XfqmoO/oSn44/s3LTp2bAr+ue1u0KbRWXBZdHyuvFZV8GMl6WgxwiWW\nod3AAj9z7ju9Obx92YXu/PuCeR90BQDHa6fgjy/B+bbo9DSLTgUFP9IkW59NturB2Gx6KhskpD1m\nM8FFjvL+LpurGL4sOlOm6MS0apSlCAHlTbbv/+rdAIAb7jqNmx9cK30c9VhxoGQVI0WjqSsdpEBd\nmt+tfa6aBz9+/4EPNA9+u1zBPz0H6XFV2Or2cO3NDzkn9253+7jz5Mbw/8XqmZT2aeA54Bp05WsY\nHGAPvbAR66JRXX1vt2jRWSjUE/cFJapUwd6l5vAEcr7T9zIlNRVSyrnw4Nvi+3wraVr0V5VBV5Gs\nCVqDqbFdVRpM1dWaiw+OipaxAn8XOfjR+hCUz+CyUZyEyMGvYtGJqeBP9OBrMZn6a6AWaw+tlV/Y\nqxadg3vLCvz4Krb6GpgRj4B/i87RKgV+TRV8m0VHXbE5s9mJNqU6Jf/2v/0zXv7ur+Ilf/Fla+/K\nXSfXh6/DJRfs0V6jXG06rkFXPmMyK3vw98Ty4Fdr+t0NLPAzR2scq3DiFkJoDWZ1brTd7PSsRdiJ\nmqXo2Ibc+D7R6hcR+Xjwt0vUiUkrCp1ef7j/NgTwqIN7hj/bME5Qm4plZ8Wi8A0fM3WTbclFziwr\nCqo9ZdoUndAKvt6HYcuAt190SSm1ov14SYHf6fWxPigChQD2WWwcBer+sRmpyFUvoqxJQjMqlP2+\n1C6ALtrvsOgY6V25WjVMyqbYAjuiRrFyJeV8zICZxD/dehwAcPODa7jV4rVXJ9hecdEqVpXjQq5J\nOpUGXXmMySxrao3nwWcO/sKiTqOtMqES0Jfo62zTUdV71XVRNwXfmoPvucDShmXkmqJjHLwmJcio\nS8+H9i5p3nJTwVf3iQtX3X0qSS5yKqbozKJMTT3oKtMUHfU12Oz0tM9OmTVPFTIOrLRLV3H05x6/\nF2V5ooI//WfzxPr2sHC5YG/beZHbajaGRU1fxjsOzMqkmExgsZJ0pJTYUD6337737NjvqA22j71o\nH1aVi95ck3RcVjafMZnqubIskCFFig4n2S4Y08bf7fzeaMc8u5nnlXoV1AJfVW9PnAs7Wc43thx8\n3xMlc1XwyzLQy5orAd2ec3h1SVPuzCbb48rvHtlnVy/Nbchu2FfEFB0tTSXwvjDZomMvbs3Vx7IC\nv2qCDpDGpqIV+O3yi5zdRIVWsecU+B6yFwPdomN/fxcpSWer29eU6O/cd2bsd9QG28detKoJhLkq\n+D3HPJdQFp0yD36sC0ZVxKCCv2Cc25pu6R0ws/Dre6BTr5ovPrgyVG62e31tZSN3dM+fLSbTg4Jf\nIUs3RZNtaYrOhAuOk0aBv6oU+OMK/qj4u3BfiYKfwKKj2TN2ERVahXOala+KRSeigj9hCbrtKG5N\nm8XDJRYdVQwoS9AB0jSaqpGU5rAzoNpMiDLUAv8REwv8+iXpaJNsHQr+IiXpmMe/71RQ8NXjQq4e\nfFfalCYGzazgj5+PbcRK0VGP+5xku2BMe+IGDAW/xh5886StFm51sul0tCv0QUym9ybbCjGZqS6P\newAAIABJREFUmfnPJ8V2mgq+qtyVWnSqKvgJ+hBM9dbXe6JeyFez6ERU8CdNsnXk4JuTuI+XfObV\n3y1L0AF0e1ysLPhJFh11P9jNoKsH1IhMh//e9vixYkJnRfXg21J0ACNJZ84V/A1jBfPG+89qCTRS\nSk3Bv+KifbXw4McYdOVK6jGJlqKjbA8n2S4Yu/Hgz4uCP1bgr45OXHUadmVbdgzaZFtBwY8VEakX\nd/p2LU9YUTg1VuArCr7yuZBSao3XlT34WfQhqAkycizrvd+XE/ePXl8OG0yB8gbTgqgK/sSYTPvJ\n27QXlll0plPwlUm2SQr86n0IVVEjMo8enD8Ff2PCJFtAL8jm3YNvChzntrpaJOaJ9e3hZ2J1qYlH\nHljGvuWm9vs54mqAVQMatnwOusoiRWdyAt5uYYGfObvz4M/HsCvdV9vGEUXBL1PzcqNricHSmmw9\nFNvdCp34kzzvIZilyVZV8C9cXdIUKLWgPXu+O7zA2bfcyi5Fp2ySrRDCOfBrq9vDz/zJF/DDv/OP\n+Ptv3++8/3OGCFDWYFoQ06YyyYOvzm1QPyvjCn6ZB19vsi0jjQdfsehYPPizWnQemsqiEy9ByReb\nFTz4sZoic8BmsVF9+KZ6L4QwmmzzrAu0mEzhsuj4S9Epm5miCgVnz4eLXtUm2dKis1joJ+/JzXPA\nTjFcMC8K/gV7DQW/RlGZXYsq0W4KFHVNry+jNA5l12Q70YM/eo9NBV+Nxazqv6/ymCGYVOC6eiOu\nu+Mkbrz/LLa6ffzF52533v+09hxALzJD21T0mMwJDabKapcpTpxY33Y2oJ6Zosl2T4ICd3uCRaft\n0aIz/022TNHZtAyqUpN0dP/9KgDoAkmmBX7fcR7z2WSrKfglBXWr2Ri6IaS0D930AWMyF5i1XXnw\n5yMHX1Vh6uzBtx1QhBBelcROlZjM3CbZTlhRUJtsDxkFvqrgm0p/Gbpanoc9w3XRoZ5Qbrp/zakg\nre1ilW/Z8wpSGZNjMu0pOmaTrZTASUfhpqr9UzXZZmLRmTUHX59iW+7Bn1+LzgIp+JYCX1fwRwX+\nFRftA6AfG87lGpPpUPB9xmTaJsu7OLQa/qKxyur7bmGBnznm8nsV1CbbeVHwdwr8enrwtQ+wUnzv\nZqm815f4u2/ej09/90HjMSYr+OrBrNeXUaY96had2VJ01KV5VcHSFfzy4ia1gj+pwVL93Q3lJLzZ\n6eGO4+PDbIDdHSNWIir4E5tsG/bi1rToAMDxNftJ9oxh5yvDHC5m9j2EQG1mtXvwlYucXWyPatF5\n5CQFP+KQM19sdpQmWyr4Y022AHDjfWeH8dG3aRGZOwV+LRR8OW5nBfw22ap/XubBB+I02lbpn9st\nLPAzRx/gslgKvlngax789focwF1NPeZUySp86Ov34jV/cwP+t2u+hk/dNCryq+TgCyGiF7hbVS06\nloO2qsId2ruE1WVVwR/t12o/xpEpLDrRhn1NKHBd74mZ9f+d+8aj8ADTolPNxqclqQRX8MtznlsO\ne4pthofLh392iibbRkNEbzjXPfjlF3nTxgBudXvDVayGKJ8DAaRZwZiV6S069RW2qmA22QI7K5mF\nVUtX8MctOrk22eqDrkbf97n6PJWCr85WWA9v0bGdH2aBBX7mqDn4u4vJrO+BbjcpOmvnO/gv/3gz\n/vLzt2czDKtnickEzKjCaifar95xcnj7A9ffM7zd1Q5a7o/18ozNfNOiFqxmA5E5WddUUlUV7oK9\nbexpKzGZW6qCr1p0yosbtcCMliQ0IUXGdfIyT+Lfvnd8mA2wO4tOVgq+ak/pT1DwHZ97TcGvMugr\nYooQYDRa2y5yGvY+hCqo8wEu2r88UZX0HdEbA3XFTj0OqKgWnTMb2/j2vWfw2x/+Nr58+4ng2xcb\nlwL/nXvPYqvbw12DRB0hgO87slPg1yFFx+VHX5rRwqZSNUUHMJJ0InjwfSv41c4GJAmdXn+4hNoQ\nenNYGQfmRME3VbnV5dEH0+bB7/UlXv2eG/CFW48DAB5z4Sp+6omPDL+hE1AtOuoBZXkXFp2HlQLn\ns7c8jPOdHhpCaCfAsmEZS60GMLiLGAr+don3WAiBdlMMlfTtXh8rjdFrYir4qmVnQ1my1yIya9hk\n6/KXmidxt4K/mwI/pgdfUa+tg65cCv74CdU17EptyJ1k0QF2fNzF38RoNJ00ybY9w8qS7r8vt+cA\naQZ9zUolBV/xSz98bgsv/vMvYX27h49+8z58+f/6idJ0rbpha7IFgG/fdwaXXbgXRQ376EN7hs+7\nDik66nlQfb/8evCnKPAjWHTUY16bCv7isG54a0VJpJOK7sHP84NcBfWK+eBeo8nWYtH5o0/eMizu\nAeCGu06F3cCK6Ck6qgd/eiXtobWR13Zju4cv3XYCn/7ug8MC4uKDK6UTj2M32k5afnQ12m5u94bP\naanZwN6lpj7oyqXgT7AnTMreD4E2yXaKFJ2xaZWKx1ZFL/CrWnTS5ODbTmDqZ0LdB2zHrmoWnekG\nfcXwoU81yXbKAubBKfz3QJpBX7NSpcBfXWoOFdBObzQb4vRGx7n6VVfUJtsiJQfYOUZo9pwj+4a3\n62DRUS+21c+JT2ulLbbaRYy+jm1Hj54PWOBnzG5O3MB8DLqSUo5ZdA4bHzZVGf/0dx/EH3/6Vu0+\n7jqxgRxwNcDuptntobN6gfOPNz6I93317uH/X/T0R5deCMZWsKeKiFR+17TnCCGMFB3Vgz96TY5M\nk6ITKSKwbBUDMGxTJQr+mc0O7jm1Ofb3mge/cpNtPA++ekK22VPMYV8FdouOI0VniiZbwPzsRVbw\nbTGZM1h09AK//AIXqGeKjhqL60rREUJoiqtKLmKPL9Qm2x/9vguHt7982wl8/a7Tw/8XDbaAvrpn\n9vfkwlYVBX/WSbayuoJ/aFXx4Afq6+g6LLw+YIGfMbtJxwAMD76lUa0OrG/3hktpK+0GlltNtJoN\nHB4UcFKOVPzj57bw+vd9Y+w+jp1YH/teCrqOpp5pT7S9vhxTMD/x7fvx2VseHv7/Xz390tL78LnU\nWQXNf920NBc61Gu1wC9UFHWJecMRk3k4R4vOLptsbY10NpuOdpyoaNFpNfzOYShjckymOujKPckW\nsCv4phhQyYMfeZptSIuOmoH/yP1TWnRqkKIjpcRGR1Xw3fu42hSpoha984B6bHjKpQdxxcBnv7bV\nxf/9T3cMf3aFou7rKTp5XtipCr76GfV53rLNpXER2qLTN9LsJl1wTAsL/IzZTQY+sPPBKK4Et3v9\n2qg0Kq7R84/YP1KoCj/uJ298cPj7aorKnSc2smi01YdQOWIyK6jJJ9e3YSbond7oDL/3rMdeiMsu\n3Ft6H7EnuZY12QLu4lb13xfNc6pyt7HdG763WkzmhCbb2Ck6/b6cqGBXTdEB9Kzrgt2s9JlzGEKq\n+NuOxrkCdZl8u2SSLWD34G92esOT9nKrUclrvRw5SWbLYT0oaDmiQk0eWjs/tiqrruo98mCVAr9e\nCv5Wt4/iML7UapQWQUeV5/+sx46U7RvuOpXFucAXqoK/utzCv/3JK4f/V483qoKvioTnMrXu6nGy\no8+ozynsakrVNE22IQZdqaECS81GZRt2VVjgZ4yWoDOFgi+EqL0P/8yGvcC/SCnwCz/6fadHtoWX\nXHXZ8LU6t9W1evVj48q5nVZJU/33Nl58Vbl6D8T34G/tssHUtOgUf19cJPT6Etu9Prq9/nDpVAi3\ngjfp8UKhr2DYD+BLjuXnDYvKZlPw1YJvmuNErLjESRaltkXBP9/pWd8fm4I/TQZ+gRpYsBVYxe5N\neZHnKmA+e8vDeMbvfQrP+L1Pace8qT34NZtkW8V/X/DqH38srjiyin/5w4/CX73sKqwOfv/Bs1u4\n/0z58bNOqAr86lIL//LJj8IPPHL/2O+p/vxl5eJou9ePtoI5DXqcrMuDP9t2nzMujsrQopkDrHpU\nibeeBRb4GbObdAzb79fRh396Uynw9oxUea3AHyhXDxoK1mMUFfvODGw6riW4aZW0hxT10iyWD6y0\n8NNPOjrxPmJbVKZpst1yKPhqo5PZaHvSsPK0LMWT9nhq/nmMmNAKGcdtx8nLpuDbmgV3MysDiNdo\nO+k10HLwB58VVb1Xn9PJ9e2xAW2qlWdSBn5BTBXbvMCxXeSpqxhdx8rSh79+L/pyx774SWUGxgPT\nevBrNuhKVav3Tlidedb3H8Gnf+PZ+JN//VTsWWrihy+9YPizefLhbxqTfRsNgdf/1JXa7+xfbmnn\nSyHE8IIHyDNJ57xDwdcnPc+2EqM+70l1lRrJ6koumoWQU2wBFvhZc26KHdGk7sOuXE1zj1A8pkXB\n+6CibB89sILLLxypFseOp2+01Tz4yoFqecpGP9We8BOPf4RWpLzwqZdUsyZEVvAnNpg6itvTmoI/\nKvBXjUZbPQO/3H8PxLcoTZpgam7T1gQP/kNrW2MrObttxo9m0ZmQAW+bUqk+pwv3LQ9XZvpSn3AM\nuC8GyoipYk/6DAB6AeP6XN5/ZqTaqxfAqkXnaAUFv245+GYxOw1Pu+zQ8PY8+fDVi/+iN+mnn3QU\nT3rUgeH3r3jEvrGLSfX4kGOSzlYED75qT1ot6ecA9BUjNZrZF7p9kQr+QqHuiNMsvQPA/uV6D7ua\nxoP/wBldwcpNwXfHZE5XYKkF/mWH9w4V+2ZD4F//6GWVtiXrJlvNoqMq+KP3Xz3Bb273jIjMyQW+\ndoETwZ5QRcF3evCVE/CjFG+xadPZTZMtEE/B14bXTLToDBT8Tb1oV6ezmj58l52vDFXF/v/Ze+8w\nSa7y7Ps+nSbnsDObc9CutNKu4ionkgELLAHG2CTbJJtoMI6Y9wO/BhuZYBuwsfmwAZOTAWMJySgL\npN1V2l1pg7RpNk6enu7pWO8fPVX9nJrq7grnVFf1nN916dKE3pnungrPuc/93E86K/c8qDXFFrDX\nG0ItJvr1cS5XMP7+sQiz9frD1mTLW3Sc3QcvWdmYCj73nszbSBhj+OCLNxlfv3x1z4J/V2kaeBCg\nVjbGeDFApDDl5HrZmpB7neAy8CUo+GrQVYDhU3TsK3MA0NkSbgW/YoHfudCDT60rS8wKfgCiMguV\nYjKdWnTIVvxARxPefv06bFzSgW3LurBluLPKvyxT1ybbWI0m2xopOoApCSJbMA25qm1P8LvJtlaC\nDGBedFgr+Jet6cUPnzgFANh/aho3bho0vsfFZDop8AOi4HP2lPndrmnTrkRrIoZD50r53mYfPqfg\nB9CiU2uKLWC26Cz8W2iaZlng0+tkd2vCVpOemwna9STlQcG/hCj4+pRXq5jSsMHZlsh7csOmQXzx\nt3fi6OgsXn/FQtGHT9IJVl1gbkSnx7LVLp9bOGdEDeGUF5TEv1/cFFsJCr4q8AOM2xQdwDzsqnEU\n/IF2WuBnkMkXjC37CAP624On4OcqxmQ6s+jQhcxgZzN62hJ4143rHT0Xkc1KdqhV3FVacFil6ACm\nLdNsnstFr5WBD9R5DkCF4s5qkaNpGqewXbqqxyjwnzszY3xd0zTXvTrNPij4xaJWM+c5ZuGv5S16\nMURJATyazOBz9xzC3hOT+OCLN1W8VlSjOeGfRadS4yCF9xgvPC4nUjnuWNJfc6XzpBp+/N1Fks5Z\nF7N26G1LYHVfK46OpZAtFLHv1DRn2wkrtAHfvKtRrReLOgGCJvxVmmILmPqUvFp0SIFfq8mW6/nK\nlZLbRCbd5JSCv3hxstI0E3YP/iS37V5+LYPEY3p+JsP5Twc6mhCNMKzuD5iCX6nJlrvROrPoDNhQ\nq60I2qArOyk6dAS9ucmWi8i08Z6IHJhiBzsKvtUiZy7HRwNesLTLeMzBs+UCP5MvGgV0IhpxpE42\n+ZAkYydFyKq45X31ce7v/rVfHsfuYxPG4y9d1cs91g5+NppWahyk8Arlwp0l6r8HyrYkrlfF9u5F\nmC06ztX3HSt7jPvA3uOToS/wzYt/J+8J9ZwHLQt/rsq0Zzs9KnZJOhBOoxGGRCyC7HxUayZftNXr\nZhfOvih4ii2gPPiBhou/86DgT0vIb5UN760uF26DHbyCbxURN9jRZGzBT6VzUgZU2EXT+Ii8eAUP\nvnMF33uB70+KDIkHrDXkiTwf6qumhYt5mq1TD77fC5xa+eeA9fYz30QXxcYl5TzrI+eTloWw00Z8\nusCUZdWw04NglSBDk3E6W+Lo7yj/bfXiHgCeOD7JJW7ZT9Ghixv/LDpOjgHK6Um+sdpQ8NMuFHyf\nZwB4hbPoxJ1rko3mw8/ki8bsk0Q04kj5pXVE8Cw6lRX8hGkB7GWmQZIsbOwIp62m+Ssi4Tz4FhZW\nr6gCP8B4SdGhaRLTIVTwqc+WNti1NcWMJJVsvmj4coFygc8YC4wPnyb6MQZEKll0ahSbmqZx6Sl0\noeME/z34pMB11GRbKUWHjy3jPPg1hlwB9e1BcNJka96C72iOY1l3C4DSDe7oaMl65iVKt8kHJdfO\n67dS8GfmKjfZUmYyeS46lPYeVaOFWGVE37TN2FnkxSwajSmnp60LfL7BuPYCFzD1H4TAg5/2qOBT\nH/5+izkSYcOqwdYu3LCrgBX4dLHZbNrpYowJi8qk84VqWXQAPpo1JdiHTwWQmFLwFxdeUnQ6Qz7o\n6nySWm/4GxfN9n2a3NxpBnRQfPg0ItO8BUdvtLVUxJlM3ijCmuMRx8eDju8WnRoKrlU6QrGomZoH\nrVN0ZrMF3oNvR8E3WXRkT7fMcK+/doKKrmLRSDY9+YKq+M/N23ScbDeb8UXBrzHJuPT16jn4Hc1x\n7pw388SJcvyhXQW/ixxTk5J3ODkFv8L2fi3r2BmzRcdQ8BcOhKvFYrPo0HvBqcl06CfaOpkLYIYf\n3BSsuoA/T2rYOV3uPucLReOYZ8ze8WRObhNJ3mRhFI0q8APMjLAc/PBZdEY5vzmf7Uyz8Kl6t4R8\nPShZ+FSNM4/FbnKg4FP//WBHs+tGn7qm6FgUeFbPZ3ouZ+x8dDTFuAs7vUGlMnnHKTqRiDglyA5u\nm2xnLZroNpJJlQfnG205Bd9h0pYfhV6tQWcAP+jKsB5xFp1Y1Z4T+je068Gnu0KyLXxOZyHkCkWc\nmZrDQ4dHjQLAPIU1PT/pd7KCla0azQ7nb9Qbml7iNEUHKC0QdStGxvSehRFewXdWF1DFOhmwmMxq\nCj5gCohwee+i19X2RMzWfZTr+xJc4KtJtosYXsF3dvPuCLGCn84WMDt/IiWikQXb7gNEqX/2dLnh\ncAnJCl9FCvxj4/VU8GkGPn8CO7nR0mZit/YcwN8UnXyh7BWNMFhOmbVqsqUZ+N1t/HFvTjVw6sEH\nFqr4MrEz5KjJ4j1IZa0U/HKBryv4biMyzc9HVqFnZ4ETjyy0p5ibbM0WnW3LrGNh7cZk0ujVCdkF\nvkOLzmgyg5d/7gH81pd+iY/95AAAftaHzlQ658qD38TtHDa+gg8AQ+TecMq0GxI2qPLe5vD94Cw6\nAasLuCbbGgq+23vXTMZ5X2OLRA8+TdhTk2wXGW4H2AAmBT8TLsVilEtGWZjtTAtcWqAt6aQKPrXo\n1FPBr5xz68Siw/nvXTbYApWbWmWQq9Fgu+D5GAW+dQY+wN/gx5IZ44KbiEZsJ03FfbQp2WqwjC30\noFsp+JuGiIJ/ttR7MuPhGuHHJFsuA76CRSnGWXR0BZ/Ptu9vTxgWrP72BP7m1RdZ/iy7Fh06PE22\nossfA7UtOmenM4b17L+fOQ1goYIPAFPpLO/Bb7W3wC1ljJc+zhaKXMpXEEmRa2OLw0FXOrTAt1os\nhQkvk33bA52DX/08ESHMcAq+zfsFN+xK8DTbnA0LoxdUTGZAKRQ1o3hhzJvXTnYTmWhoWoyV97aS\nH5eOaV9FojLr6cHnIzLNHnz7FgkREZmAvxYdp/YUvbitNpmUNtmeGC8rcVYLwUrU7T2oaM8oHweW\nCv78DWb9YDsYAzQNODo2i7lcgduds2tP0fFFwec8ptZ/H8scfNPrikUj+OJvX4ofP3UKd+xcgc1D\nHWhLRI2dPuOxNgv87hZq0ZFb4GdreIuByjf3s9MZnJ/JLIjJBHQF33lMJmMMTbGIcc3J5AuOJ8T6\nCddk6zKicJgU+FaLpTBBj/k2h383zqIT4JjMZksFn0RlurxuO22wBSSn6BTl5uArBT+gcOp9Isal\nr9ihNRHclXotKiXo6FAPPoU22Q53NhsF1WgyW7c+hGpDfvgUneoXjvOmIVduiVs0dMoiUyi/JlsN\npoXaCj5VrI6Pl3dm7NpzzL9TfoFP3wP7uxizFj7b5njU6C3RNODwuaQni44fCn7OxgKHNp9bpejo\nr2vnqh585BVbccHSTkQiDBcs5W06jNmfF9LRHIN+SU1m8lKPA6cxmWYePjJqKQCUIoCdW3SAcDXa\nVpra6oThrhbj47Ar+CkPPQmhVvAFTCF3kzpGo1nFe/DpDr8q8BcNXm7cAL86TQVspV4LvsBfWLhZ\nedATsQin9kYiDCt762/TqdZky8XV1bToVN/VsIuV31sWvIJvvUC1UtOpB7/HVLTQnSnqpbUTkWn8\nTh9tSuZBT3afT6qCz5ZL0jkz4ylpy8nx5xZbOfgWEZHmHHwrtpLhX0CpuLcrhEQijG+0Tcvz4Wds\nLPKqNdj9/MA5y68vKPBtxmQC4Wq0TXmwpOgMN5AHPyVIwZ8NWJNtpqaC792D79miI7HJVoZFRxX4\nAcWL/x7gi4LZbD5U0WCjMzT60J5FZ6hzYbIMLfBPjNepwCdNNNWbbKtfsKgH30uB72eTrdsM+MkK\nGfgAvzNFD+kbNg3Yfl7Bs+gs3FXhFHzymjfRJJ2zMyZFyqlFR76Cz6co2cjBLxaRzReRnr/ZR1jl\nRsKtJgXfrj1Hp9snH37GxiTbahF5v3iuQoGfynFxsl2OFHz5iztRpCucC05oJA8+Vd6d5+CXHx+8\nJtvq54mImMygWXTUJNtFihdlDiht9+jbwUUt+NuwlPPJ6sWslYK/xKLxdHlPeVv2xES9Cnwag1XN\ng+/AoiOowJde3NpQb60VfGrRMafoLLzwX72+D79z1Wrbz8tPBd9Og6X1oKuFKToAsHGIT9LxMgyv\nyYciL2djB4PLwS9o/JCrlnjF3opty3gF326DrQ6XpDMrU8F3btGh1/xKKWhjs1nj7x9xYE8CwmXR\nSedoga8sOl5ShWgaX9AGXdGdLisFX8S9a8ZFXUXPlbTgXQ8awqEm2S4i+HQMZzcunSBvx1WjloLf\n05pYoIZb+dJX9FAFvz7bsvyYdf5i3GTyw1fbZTlnysF3i58Rkbm8sxSdnOHBJxadtsoKPlDaufns\n6y5ZYH+qRpAVfCNFx4aCf+hskouTdLrT1+RgB8ktGRuvn0vRKRQXNNhWYv1gO/cznTYZ06ZUmcOu\nnMZkAsA7bli34BoH8LsZ1HbY1RJ31KfV5KD/p954SY3RGe7mm2zDtKNtJuVhRyPIg67oNajZopna\n6jrpFGrRsSuIyFTwszQHXyn4i4ckN8DG3bYkPTCDdjJXo1aTbSTCFij7Q1YFfm/9FXyqxJrVlkiE\nWU4xNZPJFwwLQTTC0Ntm32trxl8Fn3iPHfjPp7jGQf619rUljIi/WIThH39rh60BVxV/p48xmU5s\nSlY5+ACwur/NsLSMTKa5Iq/TcZOtv5Ns7eTg54qa7f6jeDSCzWRHw6mC79ewK1uTbCPlmNd4lOG1\nl63ABrKY06FRqceI7dB8ntSCTjEOukVHRA5+R1PMWBylcwXO2hQ2rBK27EI9+7PZAooBikittRDm\nBxTWyaIj+FzJ29jl9oIq8AMK58F3WeDzHfPBvohTaIE/0GF94zIX+NYWnfp78LmGKIu/o50bLbXn\n9LUlHKnVZqwGS8nCVnFbw6Jjjv7raUvgfbdsxOahDnzmdZdg56oex8+LX1TIPS9s2ZRsTrIFSn+/\ndQPlRluaJOTUg8+l6EibZFt7F2eBgp+2p+ADvA/fPBCvFtT+NeGbB9/6PYhEGP7i5Rdg69JOfPxV\nF6K/vQnbli4c5rVpqPy14yT+1+nixo+/vQgePDSKcXI9aI27uxcyxjgffpijMr0o+JEIk1qweqGW\ngi/i3uWmrqKzF8Q32Vbu0RNBcMNvFzmcB99Fky1g3loKj4LPZ75b21HMPvQllgp+ucA/OZGGpmm2\ns9JFMVsj0qw5HjUsCWabxJHzSfx8/1mMTJbtRV6GXAHWsZSysNNgabWDMcml6Cxc4L375g14980b\nXD8vflEhV8HiMtDt7GJY5uDz5//OVT149swM97WWeJQrYOzAW8RkKfjOEmRyBY2fYlujaL9iTR/+\n81cnAIBb+NiB2r9kTrO1Y9EBgNdctgKvuWyF8fnWpZ349m7+MXTHYsJlRCYQ/CbbZCaP//Nf+/Ct\nx08aX2tLRLndLKcMd7XgyPnSoujM1By2DFtPQw46XGyoi/ejqyVuLBImZrOuBUTRcJNsLc4TXghx\nd91OerboCB50VZCbgx+Mv6xiATMCFHx+qEU4Cvx0tmD4jxPRSMUb/IDJh25V4He1xNHZHMP0XB6Z\nfBHnkxlP/nU3pLlIM+sCX4de4JKZPG7//MMLlEWvz59eOHM++s8rFTY1Ffw2d/0n1fA1JtPlLgaf\ng88fN++5ZQMYA0Ym0sbPvX3nCscedD8aLe3EhJpz8LkptjVe0yu3L8Xx8RSSmTxef8VKR8+NS9GZ\nlenBr91obcVWUxMxwBf4FLtDrnSczOCoBx/78X6uuO9qieNvb7/IU1Z4owy74nf3nBf4Szqbjdd/\nemqOE8LqCT1Panrw3Sr4RDywGzHa4leKjppku3jwmoMP8AdwWKbZUntOtemkdhR8oKTi7zs1DaDU\naOt3gV+pWVKHU9LIjfbpk1OWtoFLVzu3pFD8LG7t2DPMTbaZfME4VmMR5rr/pBp+NtnaUW9rpuiY\njpvBjmZ87LYLPT83bpKtDx78uA0FP180K/jVC9dIhLnezaG58XIV/NqTbK3YMtxpTC7CT9J6AAAg\nAElEQVQGSsVcpWLMsUXHhwZrLxwgO1QvumAJPvaqbZ6v3XyBH94sfK+xoUu7m/FEadMrUO9D7Um2\n3pts3cSPt3IpOuGaZKsK/ICSdDFxzUxrgDvmK3E+aW+gkx0PPlBK0tEL/JMTKVeebS9Ua7IFKquo\nz48mjY8vGO7EDZsGsLqvDa+8eKmn5+NrgoyLJlvzZE4Zlip/J9k6VPD1QVcCGgtr4YcPm26lVzoG\nqPe0UNS4Bki31z47UA++zBSdrE2Ljpn2phjW9LXh+dGSrWSoq7miFafLaZNtwC06dOjR+27dKESY\nGSJRmaFW8KvY9+ww1BnMyFAnk2zd5+C7GXQlTyil9wcZk2xVgR9Q+GYQlzGZtGM+LAX+TPUEHR2q\n4Hc0xyoqGVySTh0abWkTk3WTrbVF58i5cgPdyy4cwh/c5N5zTokHrbg1PZ/JKgk6ouB/Z/CabDVN\n42/ikjyyfiv4lV4/YwzxKDN2fMZn7Vt0vFCXFB2HSRkXLO00Cvzhrma0xKPce6XjxaIja8iZF9Kc\nmitmgTvcIMOuvE72DapVifPg11Dw3TfZklhh2022RMEXnaJTpBZGlYO/aPA6yRYw5+AHT6Wxgo/I\nrFzg0YbC4SrNhSt665uFTxV8cw4+UHnYEFXw1zpsHqyGnzn4tppsTRftagk6ouDzlP1rsq2kYEcj\nzEhG0rTStm3Ko8/WDr4o+DZeP8BnQI+Ra4DT6bRO6GmrR4qOs78lHea1tKsFjDFLO47TJtsmB0P2\n6kG6yvwQt/BZ+MGxpjilUoSuXYYCalWaq6Hg00FQbq/btH/BtkVHZpNtvvIgTBGoAj+guJm4ZqYt\nhCk6tYZc6Wxb2oXLVvcgGmH47SpTTLlhV3XIwudjMu1bdI6cLxf4TtNBqpHwscnWTkymWZWhSqov\nCn4AmmwBvvhNZQrG84pGmGPV1y5mBV/G8J+czZxn6sM/OUFSozxMba5Fj0nBlzX8yG6KjhWv3rEM\nAx1NaE1EjYQdq0WPtxSd4Cn4tfzYbhju5C06YR12laoQoWuXpd3B3MnI1Pibi7CXJl3UVTIHXeWK\ntUUwLyiLTkDxMoJepzWEOfijNj34kQjDt952FWYy+arb+PUedlUrs5jfKi89di5XMIqcCANW9YlL\nOeCiEWUXtzaKuyZTsc1NsXVYtNjFznAxUdhNUEnEIsb2L93FaE1EpUW7xqIRxCIM+aIGTSu9/04V\n5lrYXeDQmxu10lXbnfNKczyK5ngEc7kicgUNs9mClMhAtyk6QKmh+pEP34RMvmjsyFrtbHW1OB10\nFWwFv1Ymuhs6W2JoiUeRzpUa+afn8o6bk+uN2b7nZncvqL0IjlJ0XNy7MvmycBJzIJxwFh3hKTq0\nyVZZdBYNblaaZtrD2GRr04MPlLy7tTy6dNjVqck5bnKcH9S6GFsNujo6NmskZyzvaRV2gwMWqiAy\nVSy6/Wg3A54Wtz0eJvZWw89hX7YVfPI92vDpponOCbK92NmCPYWKNtrSiGCn2f5OoUk6snz4blN0\ndGLRCGe3FGHRsRIWgkKhqBnHDWPOdz0qwRgLvQ8/ky9CD15JRCOuVN/BjiZjGvj5ZMZ1Io1oMjVy\n8Gn/mJvnbLbn2BVOEtGIYaHMFzWh94y8zeujW1SBH1CEKPjcWOpwFPi8B9/79nxzPGrsBBSKmu+K\nhRMFX1etnj9fbrBdN9Am9PlEIowrpmR60LkUHZsNpuNJUuBLsug0xfwr8O02WNLF3yky2MzNIBsn\nNFksMEViZxcHsL65dTTFHE/ndQqXhS/Jh1+rcHGKZYHvuMk2uBYdzp4TE7uDFXYfvtcGW6B0rg3M\n31s1DTg7HYyFzlwNBT/usX+MiqZOhBPGmLSoTNmTbFWBH0CKRY0r8N2qeO2ht+iIKfBW9NTPplOr\nIcoqru7IOTkNtjpeL5R2cTPk6Qy52VSKPvUKv6iof4oOAKwkzeAHTk8bH/uq4Eso9Gw32VpsT8tW\n7wF+ESkrC9+LRccKqwLfcQ5+gJtsaVKJ2yK2EkGNiLTLLFcXeJjq2x2896HWQthrvPFMxn38Ljfs\nKidOLOUsOhJ6rVSBH0DooJeOphgiLld2Mru/ZTFKFNyBdjE3eJqkc9LnJJ1aaSiWCv4oVfDFF/h+\nNdraSdGJRSPQD++ixqvXQxWGl3mFn4hY/xQdgO+z2H+qXODLStDRoZYRGVYNO9OMAevjw5cCX3KS\njqZptprNnWAu5juaYo4TOIKcgy8jQUeHWnROBaSwdQJd/LR66BcZ7gxeVGYtBZ/GSHq26Dh872Q1\n2nKTbCOqwF8UcI2GHnzI1LeZDIGCn84WjJ2LRDSCzhYx6uXyuir4Diw68wUWTdBZK9iiA/iXIuPG\nnnGCJqjIKvB9TNHhElSq+K9X95X/zpyCLykD33hOkiea2lnkAdbb0zIbbHVkZ+HzPQjlOFQvmIda\ndbloRg/yJFu754wbhjgPfvgsOrM1BifaZShgvQi5QhGF+eaCaIRZXiv4SbbOhRmage/0utpC7t0i\nLTp51WS7+BifFdNoSA/iMCj41J7T154Q5r3kojJ9HnZVq8nW7IHWNI2z6EhR8H1qMs3ma08xBfiC\nmzZZ+2LR8bPJtqqCXy7wqbIoW8Fvlqzg243JtLqhD5O0D1lQ7/rErHgFX7Q9B1io4DttsAVMOfgB\na7JNZ8vvmWgFn/Z1yZx9IIu0oAnX/E5G/Rc6dnqV7FpLdx8bx+//++P43p6T3Ne56HGHFh1pCj6J\nyVSTbBcJE6TA7/UQFUg9emHw4J+3GZHpFG7Y1YR/FzNN00wX5NpNtudmMsZQss7mWNVhX27hojJl\nFvg2i7umWAQzpq+1JaLSGixpoT0jMV0qXygnXkRY9Qv46gpRqLI9+PwCU26Kjt0cfB0/FHwuCz8t\nQcH3MMW2EgsKfIcRmUCwm2w5D77gAp/uCk+nw1fg04GVXq4NQVPw52xMLrYjzBw+N4Pf/tdfIZUt\n4H+fO4er1/djyfxOMK2BOjxZdER68O0JQG5RCn4AGRcUFcjn4IdAwXcQkemEein42UIR+fkKLx5l\nlgUO3+RYWNBgKyMD3a+YyKzNAT9WF7Ylkuw5ALBusLwrsvf4hLE1LBq7xS1QWoRa/allp+jIjkvk\nLTqVj2Ur/6kfHnzZKTqi/ffAwgLflUXHdN0JEnaKPbfQWOXpueDfE83Q4tJLA/LS7mBl4dtR8Gvl\n4M9m8nj7V/cYCnuuoGH3sQnj+54sOpJSdKhFx0rk8ErgCnzG2FHGmFbhvzMV/s0uxthPGWPjjLE0\nY+wpxth7GWNy746SoAq+l6hALtopV5BWyIhijLzuPoEZ6MPdzUYj57mZjHRbhg5tsK2kRHFKWr6A\nI5IbbAG+0HhhdBYnJfUl2PVfWxU+g5LsOQCwtr/NsP/MzOWx79SUlN9j154DlAqZYYtFjfQUHdke\n/II9Bdvq5kaLEFlYpehMpXMoCrpWio7IBKwUfG8FfuCabP0q8EOo4KdEKfid4VPw41UKfE3T8OHv\nPY3DRCADgD20wPcwW0iWRcfunBC3BNWiMwXg0xZfT5q/wBj7dQDfBTAH4JsAxgG8AsDfA7gawB3y\nnqYcqDew10OhG4kwtCaixgGZzsmZ1CiKWS77X5w9Ix6NoLMlbih003M5oTsElUiRi1YlxcBcYPEK\nvvgGW4AvqN/19T0AgNsuXopPv+4Sob/HSwa6rAQdoJRrvGtdP76/dwQA8PCRMVy0vFv47+EHHNUu\nVFb1tS1I9pCeg+9jik4iWvm1WNmX6pGi88/3H8Ff//RZ7FjZje+8fZfrBDMdGR58s+fejQefG7Dn\nk+BhlzmJMZnUojMzF74Cn94jvbw3dIf03ExpAKQMD7hd5mwshKtZdL6/dwT/9eSpBf9m74lJ42Ma\nNOI8JpP0MwpcEC/WJttJTdP+yuK/v6MPYox1AvgXAAUAN2ia9lZN0z4I4GIAjwC4nTH2Ov+fvjdE\nKfiAadhVwG06nDohuLChqteUT8pNykbigVlJkx2RCVgXzz944pTw98Wugm1V/Mu06ADAVev6jI8f\nPjIm5Xc4UfABYHX/Qh9+6BV8uosTq3wDS5hubm2JqGOfrBu6iH/99GQan/n5IQDAnuOTOHjO3Bni\nHK9TbK0Q48EProLPD7oSW6JQgWsmkxe2U+MXou6RiVjEELmKWmlnu57YEUNoAZw1pej89zNlc8fL\nLhwyPn56ZMq4Bnmx6ND7d1qSB1/GAiuoBb5dbgcwAOAbmqY9rn9R07Q5AH8+/+k76vHEvEA9+L1t\n3pTsdnIRCHqBzyfOiL25021sWRMrzdSKyAQW5lHzCTpyFPw/uGk9rlnfj7UDbVw8YVLw8UEvwtUU\nfGuLjtwCfxcp8B97YVyKbcvuFFudlb0L/95+5uDLKPTsNpHFTB78oa5mKf0nZnqI+k0b3AFgSsB1\nQoZFpzke5c4Zrx58Pb0rKKQFTGutRCwaMYp8TQOSIUiXo9i5p9hlaXdwsvDtLOo4i47pek1F0Tde\ntdoYHJjNF7F/PnY4mDn4i1PBb2KMvYEx9qeMsfcwxm6s4Ke/af7/P7P43v0AUgB2Mcbk+zEEQg/W\nboEKvsgDUwbUsy5awe9s8d97WSsiE+BvtGem5jAyP+gpHmVYWSFZxStbhjvx1d+9Avd+4AZuwFJK\ndIFvs8HQqvCTadEBgOU9rcZNIJ0r4MmTkzX+hXPsvn4dqyQd2Tn4fJOt5Em2Djz4fvjvgeoTYGcF\nFH8yLDoA/7zdePCj8/ZNoKTgTqeDU+imyU6S6BQdgLdnhM2Hn7JxT7HLEDfsqr5RmfQ8sZOiY/bg\nT5K/Y3drAjtWli2Xug+fJqY5LfBbOAVfDbryyhCA/wDwcZS8+PcCOMQYu970uE3z/z9o/gGapuUB\nvIBSn8HaWr+QMbbb6j8Amz28DldMcAq+twKfFsqiFVrRyFTw62PRqZ1ZTBV86r/eurRLaEFQiXZu\nGJroAr/8+p1bdOSvya9aS2w6h8XbdJyk6AB8Fr6O9Bz8mFwF320fhuwFnk4sGkFnBT/ujICUFae7\nOHbhCnyXItCy7voNAKwG58eWUODzjbbBvieaoSq0V/vecICiMu3sdCWq5ODTXfnu1jguWdljfK77\n8JOk58JxDn5cjoKfpwW+YDsaEMwC/8sAbkapyG8DcCGALwJYDeC/GWPbyWO75v9fKQZD/7r4DjqJ\ncJNsPSr4YRp2xSn4ggubuhT4NsaKVyriL1npzyErc4fHSQ6+GdkefADYtZ768EeF/3ynGeir6qDg\nN0lU8ItFjd+CrqJQmSfZ+pGBr1MpiljE7BBZU1kvX9MLoJTnvXm4w9XP4OaD+DwAsBpzEnPwAVMW\nfggabVPZPD7xs2fxxn/7Fe4/dN74utcG/KGu4ERl0v6fiik6MWuLjqZpmCIzLLpa4thBCnxdwfdm\n0ZFzn6TXR6tp3l4JXKSKpmkfNX3pGQBvZ4wlAXwAwF8BeJWE37vT6uvzKv4O0b+vEoWixo1Md5OQ\nQKGr/GTAh11xCr7gwoa+j/Vosq20YKl006cXKJm0SezRsGvPsErRkRmTqUMV/L3HJ5HOFoR6fmlx\nZ0fBb2uKYaCjiZvmK92DL1HBp1Ma41FWNZHG3GA27JNFBygp4MfGFha4tCnPLZmcHIvOn//aFly+\nuhfblnVxirQTVvQEU8HnB12J1yDp+yVil0Y23919Ep//xZEFX/eq4FMPft0VfBszUyo12aayBaNQ\nbo5H0ByPYvNwB5rjEczlihiZTOPc9By3Q+3JopMTc8xomma6Ri4OBb8SX5j//3Xka7pC3wVr9K+L\nN9hKYjqdM6ZfdjTHPP/RaQEn2mMtGj7jV56C71eT7aytJtv6KvhUIRbhOaZQdcKJRaenNe6LPWmw\nsxnr54deZQtFbiiKCJym6AALffjSJ9maJimLxMnrNzeY+RGRqVPJw54MsEWnNRHDbZcsM45fN/AK\nfn092BSZg66A+vRjeeHI+dkFX+ttS+Cy+V0ct1Ab3Kk6e/DtKPiVBl1x/vv5RKl4NIKLlhEf/vFJ\nLhY1CE22haIGjUw6j0pQ8MNU4Ot7U9So+tz8/zeaH8wYiwFYAyAP4Hm5T00c4wL994ApJjPgTbaz\nmcby4KftNNlaFLKDHU2cP1YmfIyqYIuOyyZbP+w5OlTFl1rg2yzuzD586ZNsyfMSnYPPR2RWf/3m\nFB0/LTp0Jga9TojY8cw63MXxk+V0wnegFHzSZCthB4trsg2BRYcqz2++ejW+8pbL8cCHbvQ802aY\nWHROjKfqmqRErz3NFXZtKuXgV3I8UJFs7/EJrv5xPMlWQoGfL9IEHTnXhmBdcapz5fz/abF+7/z/\nX2Lx+OsAtAJ4WNO0+oa8OoAerF7994BcC4ZoGi0H384FJR5lMC/cL1nZ7UtEIMDHqIru0bBd4Mfq\nV+BvHCr7l0VP9OV7EOwdz34r+FyKjmAF3+4ODrAwI3+40z+LzmsvW4HO5hjW9Lfh965dY3xdiEVH\nkoIvghW9fIEXFGhKiYydvLA12dL79o6VPbh+44CQ3pzlPS3GrInRZBYnJ+qn4s/ZsLJVmmRL42zp\nfZ422j5waBSF+YI6EYs4XmxTIUxUio7sKbZAwAp8xtgWxtiCKAnG2GoA/zD/6VfJt74DYBTA6xhj\nl5LHNwP42Pynn5fyZCUxPitmiq2OTAuGaFISU3TqsS3L5TlX2HZkjC3YkvTLfw/w77PIHg1N0/gL\nWJUGy4UFvn+ptsvJTonobWo3xZ1ZwZfRZEhp8knBr3VDpcdHayLKNULK5vI1vXj8z2/FvR+4nnv/\nRaRKyYrJFAG16JycSAcmC58ehzIU/LA12XrxjlcjEmHYvoKo3Cfq52TmbVnW1wrahJovasaQMj4i\ns3yfp1GZehY+AFcD9HiLjpg6SvYUWyBgBT6A1wI4wxj7CWPsnxhjn2CMfQfAAQDrAfwUgDHNVtO0\naQC/ByAK4BeMsS8xxj4J4AkAV6G0APim3y/CCyKn2AK8ApgKepOtxBx8Ou3RNwWfNtlWeT3mAv8S\nHwt8WT0avDpRvcHSrO76FZEI8HnrpybFNpplXFh0VpMCszURrfq+iaBZpge/YC8mFeBz8P0ackVJ\nxCJgjJliYwWn6ARMwe9sjhuKZyZf5Jq764kdYcQLvIIf/AKf3kecxjvWwiovvh7YWQgzxnibzvw9\nhovIJPf5wc5m3L5z+YKf4+Y9pMehKAVf9hRbIHgF/v8C+DGAdQBeD+D9AK4H8CCANwJ4uaZpWfoP\nNE37wfxj7gfwGwD+EEBu/t++TguKLGGTcc6i4y1BB+BXnkG26BSKmpGewJi1N90LdNrjZDpb5ZHi\nSHETGStfVKgPOhZhuHBZpZ5x8fA7POIWgE4aLM3Fr+wpthSaJDEymRY6ut5Nk+3agTajyLTKxReN\nzBQdJwscukXtp//eDL35JwWou1yKjoREGK9wNp2A+PDTNtRcL9Dd3DCk6IjMvjdjlRdfD+wo+IB1\noy29n5tTB//Pr2/FpiV8jKyb95BT8AVdJ+1O+fZCoGIyNU27D8B9Lv7dQwBeJv4Z+Q8dclUpn9kJ\n7SGx6NCLemtcvHJZlxz8bO2YTIBXUbcMd0rZlq5EG9dkK+744PzXNYq7eir4Hc1xdDbHMD2XRzZf\nxNhsFgMdYixCTnPwgdKC67O/eTF+8tQZ/M5Vq4Q8j2rInGTr5Big2+9DPvrvzXDXSyEKfnAtOgCw\noqcVz4yU7AsnxtPYKf+Qq4n0HHyq4C9iiw4AXEwsOvtPTWEuV5CSXFQL7jyp8vuplUW/vnAefFOB\n35qI4fNv2IFX/sNDxvvoRsGXkYPPZeAvEovOoodadISk6DSJPzBlQO0hojPwgVKBrcdQzeWKwv3G\nVtiJyQT4C9oOn+IxdWR4CwFn/ut6NtkCvE1nZFKcD99Nig4A3LR5CT71mu2cP1YWvEVHoge/hkK1\njexaXeEx/s8Loic7B9miAwRz2JWdyEQvhDlFR7R1tactgbX9pZ3CXEHDvlOVZobKZc7GJFvAutG2\nkkVHZ+1AO/7ujouMzzcPOR8M1xyPQHcNZvNFo2HXC3kfmmwDpeAr+CZbMR788gVBxA1LFnwxLP6i\nzhhDV0sc4/MLqKl0DoMdcpWKlI2YTIAf5uKn/x4QX9DocBGJDi06fjbZAqU0iWfPzAAATk2mOVXL\nC9SDHsTiDjA32crLwa91DOxa14cvvGEn0rk8XnHRUqHPwwn0fJgRYdHJB9yiE8BhV/7m4Af3ngiU\nwgr4Xi7xJdslK3vw/Ggpa3/PsUnsXOX/Atvuos4qKrOaRUfnJduG8dW3XoGDZ2fwustXOH5+jDG0\nxKOGSJrK5tHhcsCcDu1TkzHFFlAKfuCYEOzBpxeEIDfZyszA1+n2OUnHbuzntRsGAJR2bK7fOCD9\neVFk7fBwDZYOFPxohKGv3d8Cn1PwBUbFUf910DLQdejNNJXNC1GmdDiPaY3XzxjDS7YN4VWXLJfW\ncGYHc0+K1xYuWZNsRbE8gMOuuEm2MlJ0QqTgZ/JFIy89FmFShAIuL/5EfRpt7e500Z1A6ybbyjXT\nNRv68ZZr1riuL6hIJ6LRNu/AwugWpeAHjAnBg644j3WAPfgyp9jqdPo8zZYuqKo12b73lg24ZkM/\nVvW2Cum7cEKbpCbsjKMppuXvD7Q3SZnoV41lsiw6PjRReYUWUKPJLH7j8w/jk7dfhI1LnG9jm3GT\nIlRv9IxsfRt+Llf0VGQG3qITsGFXmqbxTbYS3jOqvM7M5aFpmu+pTXYxJ+jIeJ40lnnPsfo02mZs\nKvhWFh3aU2f24ItE9LCrnFLwFx9cTKYQD344UnTo4kOGBx/wv9HWbpMtYwyXre71NT1Gp01wU6EO\nbSCqVdjQ7/ttzwH88uAHT70FSufEtRv6jc+fODGJX/vsA/iffWc8/+wwLHCsoDnZMx6HXQW9yXY5\nseicnprjfMH1IFsoQt80iUeZlN2cRCxiNO8Wilqge9NkJujobFzSbqjTZ6bncFrwPBA78JNsHVp0\nqIIvwNZcida42N3uXEFNsl1UFIoaP7ShynaTXdolxSCKJpWRr+D7WeBrGn/jkGU78oqsHR4nDab0\nokwtA36xrIdm4de/ydZv/vWNl+F9t2w0EipyBQ1fffSY55+bC8nrNyNy0Rv0Y6A5HsXgfGpUoajh\n9JTYWRBOmcvKbbDVCUujLV1gik7Q0YlFI9i+nObh+6/i85NsqzXZ0hQdCw++gJqpElTBT+e83ytz\ni22S7WJnKp0z1IvO5pgQ9aIpFkGEdH/n6qzQVGJW4hRbHT8L/GyB904G8eYO8Ds8KQGeYx0nhc2u\ndX24Zcsg1g204W3XrRXy+52wrFtOgZ8p2Ltp1ZtELIL33LIBX3rjZcbXxpLeZ0WEVcHnGs895qS7\nmWbsN0FK0klLjsjUCUujrczhjxTqw3/82Li031OJOZsKPi2Es3kNc7mCsTiIR5mUgA6dVsEWnXyR\nHwYpg2BecQLIVDqHn+8/KyRZoRLjgiMygZL9IwyNtimJUWA6tMNetgc/LTkVSBTxaMQowAtFTViS\nCm2yraVOxKMRfOmNl+GeD9yAi5b7GxMKlHz/+gV2IpUTFhcahiZbyhoyWEvEAphL0YkF0+NsBc3J\n9m7RIR78AKboAMFK0pGdoKMTlkZb2Qk6OpetLifnfG/PiO/vScamgk+vo7lCkffftySk9lKILvCz\neZqDrxT8uvLaLz6C3/33x/HOr+2R9jsmBQ+50glDo63dzHgv+Kngz3IJOsG05+jIaLR1M8W1XkQi\nDMNd4lX8rIMUmSAg+vzgj4HgLnLNiBx2FXQPPmBW8OubpFMfBT+4BT6NLu5wMaDJLtds6MeqvtJx\nMJXO4V8feEHa77LCroLPpejkiyb/vTx7DsAHZQhJ0SnKv0cG/64TAPJFzcjJfuDQqLTikFPwBTaL\nuG201TQNP3xiBF95+KjwIThm7DakesHPi3qavB4/J9O6QcaUvrAlqCztLjc4nxQUlZml6m3AFzlA\nqYDQBbBkJu+54TJsCxwdfjaERwXfpjJZT4KUpMMl6Ei8boZlmi2n4Evs44pHI3jvLRuMz//1wRe4\nwA/Z8Ck69gddUVFUpv8eAFrjElN0lEWnfhRN2dD7T01L+T00IlNkN7jbRtuHDo/hPd94Ah/50T58\n/ZfHhT0fK6hS1ggpOn6kH4hCxrCrnA8ZvyJZ1l0uck5Nimk0DHqDpZlIhJkKH2/HQthevw616CQ9\nK/jBjskEgOW95d2rA6enhfXhuGFOckSmDlXDZzwe5zJJ+mTRAYBXbl+G9YPtxu/94v3PS/19Opqm\ncQp+tZ2uOE3RKRT5UBLpCr7Yqe8qRScgmIe/yBrnTKfY9raJO1g575iDAu6XL4wZHz8zIneEtR8K\nfrevFp0QKfhNYi9cAF/cBbWwoSwjCv7IpBgVM1sIvj3DjMhFMN9kGyIPvqwmW4mWEy9cMNxpLMAO\nnk3ingPn6vZc5iQPudIJo0VHVoqOTjTC8L5bNhqff+Xhozg/k5H6O4GF0ajV5qAkOAVfw1SK9+DL\nRPSgKz5FRyn4daOgmQt8OQq+Hx58Jwrt0bFyoTPpo2ddmoJPm2ylW3Tkx36Kgj8+xFh0qD1Fljoh\nEj4qc3Eq+IDYAj+sMZlCLTohWOh2tybwhitWGZ9/6u6DC3at/SJNYjKlevAF7lTJxK8mW52XbhvC\nluFOACW71A+fGJH+O530qSRIs342X+QjMiUr+OYp117JKwU/GPin4Mvx4NMD81cvjOPln3sAr/+X\nR/Hkiep5t8fGZo2P6eJDBlyKTgPk4PuxYBEFTS1yssNTjbBFJHLDrgR58MPWhwDw54jXcz5sx4CO\nqCbbfKFo3DsiTN60ShG844Z1RkF94PQ0fiZg0JkbfEvRaSEpOqZ7wX/+6jiu/pt78fd3H5T2++1C\nBZd2iU22OpEIw20XLzU+Fzn4rxL839z+1POSB1/s3KBq9BHR9dyMdxGIn2SrCsBbD3IAACAASURB\nVPy6YS7wD59LCtmiMSPLg08LuC89+AKeGZnGw0fG8Kp/eggf/8l+y9eiaRpeGCUFvp8FcQOk6NBC\nuTWgW/M6fMqSKAU/XMWtjGm2YXsPAH6Xy7NFh4vJDMfrB/gC34s/26xMyozw88pARxPeuGu18fmd\ndx9ccN/zg7RvMZnWTbbFooa//skBjEym8Zl7DmHP8Qlpz8EOs5xFx5/7yEBHeZq4iHkYteAb0au/\nxgUFvo8e/KGuso3zjICBcJwHX1KMcHiuunXEfKErasCzZ8TbdGTk4AOVC+aiBvzLAy/gtn98aMHN\nfDKV425uU5Jz4zkPvqQLWUs8anjdsvmi1GSgVIhiMt2mLFUjG7om23KBf2Z6znOCDBCuqFCdLoHe\n5NAq+M1iLDph28F523VrjcXN4XNJ/PipU74/BydqrhcqNdmenEhjhlwD77yrviq+Xyk6lL52UuDP\nyvfgO5kVQc+jTL7Ie/AFiqJW0ChlMQU+EUCUgl8/zB58QI4Pn2439QhcjZoLTMaAi1eUBwo9d3YG\nH/z2k1x6wlFizwFKCr7MdAU6gEuWgs8Y4xpxZKr4KW4yb8AVfM5bKGjIE7loh6G4aY5HjS3YQlHD\nOQHNZVyjcUCHHJkRucsVtgJXR5RFJ2yN5j1tCbz56tXG5/cfHPX9OczVOQf/ubMz3OMePDyKR46M\noV7M+Nhkq0OtKH4o+HM0ItOxgu9fTCZV8E9PzXmuh/Jck60q8OuGVcORDB8+v90kssmWP2nee/NG\nfP+du/DRV241vnbX/rP4ZxKLdWyMTxIpFDVhEYpWzPqg4ANAF/FeypxmmwrJJFuAV4ZETTqmP8ev\nG5NX+EZb7zadTAgVbJEFfqoOxYkI6IJ3xsM1LwxTbM3QSdITkvuurPBt0FWFJtuDpgIfAO68+7m6\nRYf63WQLAP1EwR/1w6LjRMEnaTNmD36X5AK/szlm1FLpXEFAyhidZKssOnXDyosoWsEvFjWuqU3k\nwapPqAOAGzYN4A9vWg/GGN64azWn2HziZ88aaoVZwQckF8Q+KPiAfz78lA89BaJok5CDT29MQX/9\nOks6ywqNVwVf07TQW3S8nu+zPp3ToqH2jaSHIUhhmGJrhu4c16XAJyk69Wiyfe7MwgL/saMTuP+Q\n/7sZgMmD70OTLcDbg8dnM9ITlZwo+HQnMFfQfJ1kyxhboOJ7Ie+DABSOu06dsSrwnz09w3movJLM\n5qH/mrZEVOiW9i1bluBDL9mEt1+/Dp/7zUsQIWkOf/LSLdi5qgdAyZP/x999CpqmLVDwAXkFsaZp\nnIIvU/H2q8DnC9xg39zbBA/wAEw7MgF//Tqy/OfxKOPOuSAj8vzwa1dONG2CLDphmGJrhhZJMgWd\nStCBR35OstUVeqrgX7S8y/j4C784Iu25VCNZh53QRCyCzvnFRFGTH7BBFXwnKTrZfJG7RnVLzsEH\nxPrw1STbgGDlwc8Wijh8Linsd0yl5NhzACAWjeCdN6zHh1+6GR3N/Co3EYvgH1+/Ax3zF4/j4ykc\nPpf0VcHP5IvG4iYRi0jNTfdNwc+FJyazVXC+L2Ca5Bvw168jcnx9GNV7QOwwuHrYC0QgarIzN+wu\n4ElaOvTeUw8Ffy7rj0WnOR41zstcQcNcrohcoYgj58v39L959UXGx7KisWtRr3OI2nTGknIbbedc\npuiksnnj/GSM33mThUgFP1dUOfiBgCr46wbajI9F2nT89JKZGepqxtXr+43PHz4yZqng04YWkcz6\nkIGvQ29gUgt8H1+TV9olpOiEUb0VOsU1pA2mnUIVfDrsLZwF/mw279qiUA97hVfMCzy/ozLTPqXo\nALxNZ2Yuh6Ojs0Z04bLuFmwZ7jCew/RcXnq0splCUePeDz/jlvvay/dJ2T58J8lJVCyhz6urJe7L\nLulSrsD31qdFBwGqSbZ1hF7kdq0rF8LPjIhb1fs5kc2KXev7jI/v2n+Gi+zUkaXg++lX5woYiQoV\nLW5kjlwXQavkJtuw+K95X663hU6YejAoIm1K3CI3JIs8AIhGmKEeaxq/G+eEZAibjGPRiKGEalqp\n8PUTv1J0gIU7djRBZ+OSdjDGsLyn3L92Ynyh6CWTpEkk8tPm19fmX1Sms0m25ZL1POmTkp2gozNE\nLDqePfhKwQ8G1KJz1bpyIWzVkOMWP5tFrNhFXtdDh61jwWQpGH6qvdVU2mJRE9ZQlA6Rekmfn6gm\n2zAWNyIV/DC+foAfdOXFe1ssar4Mr5MFl4XvcthVWI+BHs6m42+B71eKDgB0cOd7HgfJ/XzjUAcA\nYAVJ1jo54W+BX88dIKrgy47KdDvJlk6TlZ2BrzMscNhVlvPgqwK/fszXfM3xCFb3lS06owK9afRm\n2uVDs4iZdQPt3AQ7K7yOrq+En2kblYq4Z89M44r/ew9uufM+IZ7DMFlU6PMT1WQbpjkAOiI9+LMh\nVa/bEzHoQmEqW3AdJGC2WkRD0mSs0yHAh08XBmEq8LvrmKSTpn5s6Qo+2bEzKfiblswX+L1UwRcz\n4dou9exh6fPRg08V/FrJSdTKQi06/in44iw6fIqOsujUnc7mOLeytbKxuIXaReqh4DPGOBVfh97o\nZCn4fkyx1alU4H/5waM4P5PB86Oz+OnTpz3/njRn0Qn2zb1NRpNtiCb56lD1WqSCH5bXDwCRCBOy\nk0EXuGEqbnVERMcmQ+jBB/g+JVmiTiUy9bLopHM4eLbcYLtRL/CpRcdnBb+eO0D91IMvsM6xgt4r\nay3qaEgItU77VTMtNVl0vMxHyNEcfDXJtv50tcRN25dZYZYOzqLjc5OtjlWBfyGJCpPlwfdTwe+u\nUMQ9S9Sb8wK2JP1sHPYKVdhFNNnmCkWjyTQaYaGJCDTf8L0QVnsGIMaqFNYMfB0uSWfRWXSIgj9b\nR4uO5Osm7bk5MZ4ykuMYA9YPtgMAVvS2cI/xEy6JzOdziPPgS1bw6XnSUeM82bmqB9dvHFjwdb9q\nps6WmLHwTGUL3JA0p9Dd0bike2Q47rwBobMljkSs3IRU1MSp2vwU23oV+P0LvrZ9RXmyoaw83JSP\nmel0DPeJidIWW7Go4RAp8L0235Zy/cNT4HBNttmC50Ur32AbBWPhsGdwDaYeLtxAeCMiAVEFfvgs\nWhTOg7/ILDpUxJKdgW6GqrmyU3So/eaz9xyGLsau7mszrCJck+2EvxadZKb83vtv0fHPg8+dJzV2\nuhKxCL78psvw16+6kFsMrOlvq/KvxMEYE+bD5wp8SRZGVeA7QL/x0SJxTND2FR+T6b8HHyhd8JaT\npiIA2E5Gl0/JUvBpMSz5Qraqr81YgZ+fyeDczBxGJtNc6onXm9pcrmhsHzbFIoGPSaSpIQCvorkh\nGVJ7BlX0vFt0/B9QIwo+acrd+0DPp7C9fkBMFn54LTp02JW/Fh0/U3Red9lKDM1Pr6YNjxuXtBsf\n00XAyYmUJ0uGU+g1xI+Mdwq16IiqcSrhdKcrEmF4/RUrcff7r8ebr16NN+1ajdsvXSHzKXKI8uHn\niUVHKfgBQG/K6WkT78OfqnNMpg616cQiDFuXdhqfy8rB9zMzPhph2DLcYXy+79T0gjQkr1YkGi3n\n94XZLW0Cs/BTIVVvW+JRo4krmy9yxYZTZkNqzwAkKPghe/2A2aLj7j0Iax+G2YbqJ3ToUa2GS6/0\ntiXwj7+1AzGTeqo32AKlc0G/78/lijgv2a5CqWejPrXoiAwTsWLG5UJ4qKsZH3nFVvzVK7f6eo0V\nNeyKm2SrFPz6Y6XgjwvKiK13TKYOtems6G3ltuqkefB9trNsXVruK9h/appLTwC8q7fU3mGeHBxU\nRDbahrHBFihtv4ry4YfZolOpT8UJfJNteBZ5OrTQcHs+OPEWBwk+Rcc/i06hqBlKOmPwpXdn56oe\n/NmvbeG+pkdk6tQrSaeeC8SulriRfDUzl0cmLyZ8wQq6gA7DeWJutHULbbJVOfgBQN+67uUKfAke\n/DpZdADghk0DxgLm5s2DaCEjvTMeVc1K+D0QZ9uy8q7EMyNTOCi4wOdu7CFR8OnCyquCzzcYh+P1\n6/A+fPfHAadKhazAFaHgh3HQGYUqgjMu+zHCOMkWqF+KDpeHHvOvd+dNu1bj1ZcsA1BqML7a1ItG\nk3T8zMLnjh+fz6FIhJnqHHnHQdisbEOcB9/9go/z4Esq8IP/bgaILqPAL29fiVDwNU3jvK71VPC7\nWxP46XuuxeFzSVy5tg+MMXS1xo2pcZOpHIa6xBYs9VTw952aXmAj8XpToxadsNgz2gQm6YQ1Ax4w\nD79ZnAo+LfDd7tqZp3CGDXreuj0faPNgmBa6Pa3e//5u8DNBh8IYw6desx2vvWwFVvW1cRZcoH5J\nOvW+hvS1JYz7/lgyi+Gulhr/wh1ha0YflmDRiUvKwQ/+uxkg9O170U226VzB2JpsikWkew9rsaSz\nGUs6ywdxdwsp8NNZbgUrAj9z8AFgw5J2xCIM+aKG4+OpBf63qXQOxaLmejT4zFz4FHx6A0l5tOik\nQpQgZIZT8NPuFzr1vjl7QYiCnw3v6wfE5ODPhHAnDzCl6PhY4PMKvr/mAsYYrli7MCYaqJ9FZ6bO\nfTz97U0ASrvbMn343P2yKfiWVlEefHptlWXlVRYdB+gWHdFNtkHx31eiW7Ki43dmdlMsagwyAYC8\nKRayqPEXV6fwikTw/p5WcE22HqfZhrW5EOCnW3pR8MPqvwbEFPg0ASRsxwDg3aKjaVpoF3mVJtme\nm5njhguJhivwA7TrYzXsaiqdkzb4UafeFi8/ojKLRY1PXQvBQph68N3GZBaLGnf8yKr7VIHvAD1G\nr09mgV9H/30laGynjAKfz8H35wSn6UBWeIkEnQ5hio5ID76fcw1EI8qDPxviArezxXujMT0GwpSk\npEPPWzfnQzpXgF4LN8Ui0jy2Mmhvihm7mqlsAZl8AV95+Cgu//g9eOln7pfWcJnOkgSdWHCOGc6i\nM5HCI0fGcNnHf45r/uZeHD43U+VfeqPe1xBu2JWgMBEzqVzBmD/Qmogajb1Bprs1bjSAJzN5zpJr\nl5m5vHF96GiKqSbbINBl2WQroMAn8ZNddZpiWw0+VUP8Sp7Pwffnwr5tWVfV73uJBKWKX2dICnze\nc+wxBz/j31wD0YjIgAfCbdGhIoOISbZhe/2Ad4tOMoQ2PR3G2IJd26/98hgA4ODZJB59flzK753L\n18eDXws67OrU5Bw+8qNnkM0XMZPJ4ydPnZH2e5N1btT3Q8EPm/8eEDPsiu6MdbfJq/lUge8A3YMv\nusCnhURXEC06ApruqpGqQ+pKLQXfy+sMWyoAwKusInPww5wgIy5FJxzHgA69Brld6IY5SQnwPugq\nzDY1gE/SGU1mcHS03Fx66Kwc1ZpOsZU95MoJzfEoBjpKanahqOHg2aTxvVOT8jz59RYJ6LCrUVkF\nPpnWG5Z7JcD78EdcHANcgS/RtaEKfAfo6l6facqb1+l2fERmAAt87oYvw6JDPfj+XNi3DHfCnMK2\nkjRTeXmd/KCr4P09rZCVgx+2Jls+B19Uk21wihU7CBl0RS06IXv9AK+6ey3ww7bAA/gknX0j09yk\nV/NgQFHQFJ3meLBKkxU91gkyboo7uyTrvEj2w6LDN9iG5zxZ3ddmfPzMyJTjf+9X32WwzqIAw1j5\nAGyJRw0PVjZf9FwQBb3JtktyqsJsHRI32ppiWNNfPkkZAy5d1WN8PuUhKjOUKTpkYZXy2GS72Ivb\nYlHjFq1hU7DbiBd2Lld05bmmrz+MBS69Dk2nc45FnLAX+FTBf/wYb8kxzw0RBddkGyAFH+CTdCgy\nFfx6z1PxxaITwt1uALhiba/x8cNHxhz/e6rg09Qq0agC3yYdTTEjNpExxjfaejz46TZ4t8Q/tlu6\nW+R68PmhOP5d2Gke/qreVm7bTZhFJyQ391YBsYA69WiaFoXeSA+4t+jMmpqM3cat1gvGmOeFDl3k\nhbHJti0RNVTsTL7I2TLsEEZvMYUq+I8fm+C+d/BsEkUJaTq0wA+SRQcAlldR8L3u4FsRhBSmUkxm\niTFJMZlhPU+uWlsehvb4sQnHA0DphOgepeDXH7M3vpesbsc9DkbiPPhBt+gIVvCz+aKx/RvxaTy5\nzjbiw9+wpEOYFWmaU/CD9/e0gl5cUx6bbMPcYCnEnhLi16/T7TFJhy5ywnTj1mGM4ap15Vz0h4+M\nOvr3YVUmdajQ9Pz5We576VwBJyfEK9fUgx80BZ/aN3ta48aOZyZfFDILx8xcrmikrCTqlMJEew1H\nBViRrZgJYaQ0UPLgrx0oOQCy+SL2HJ+o8S94qENApqirCnybdJoKNZHTbP3IQ/VCt8SYzLTJyuDX\neHIAePn2pcaF+vady4W9TurBD0uKDtdk69WiE+IhR5wH36WCzzWOhez163R6bKxP+TzbQgZXrSur\ndE634WdDuItHqXUfek6CTWcuX/b5BylFBwBu3DRo2GT+5KVbOMuODJtOEHaBWxNRoxcimy963tm1\nIqzD4ADgKjIY7RGH1wel4AcMs7LOTbP1atEJeA4+H5MptsCvZzPesu4WPPKnN+OhD9+EF28d4nZp\nvFiRuG3HkFy0uCZbjxdyPkElWDfqWnQJiMkM+5AnwPtORjLEfRg6u4iC/+jzY46GPIU5RQmo7QuW\n4cMPsoI/2NmM+z94I+7/4I14zWUrsKy7bNkZkbCbEYQ+ppIVmdp0xO9UhDlOdpcHAWBCKfjBwqzg\n0wug16jMyYAr+Fxsnkc7kpl6+7U7m+PGxVpUHOhMCC069L1PeU3RCXEOPr3JzGTyrrzGQbg5e8VL\ngZ8vFJGZV2MZC56f2i5r+9uwpLNU4MzM5bHvlP20jLB6i3VqqYoyCvy5AKfoAKUJ9iv7Ssr9Ulrg\nS1fw63cP6ecSA8X78MO823klabR98sSkI2FMpegEjAUKfru4Ap/6sYLowe9oihmpGrPZArJkK9Ur\n9ECvt9pNV9JuPfi5QtGIe2MsPAo2bS49N5Px5Lfk/Nchs2fEohHjRqNpvBJrl6DcnL3gpcCfraPt\nTiSMMW4b3olKN9tAHnydGGkWlxGVeXSs7PUPujCyrMfPAr9+95DBznLwxIHT4v/mYe5V6Wtvwuah\nDgBAvqjhsaP2B8CpFJ2AQQsgQOywq6Ar+CJSNSpBm7Xotmc9ENFMbPbehqW4WdrVYhS247NZnJ12\np9ZoGh8RGTQvrR1o34SrBtOA3Jy94OVcoLtyYUzQobjdhp+pcwKKV6yKjl3ry+/F8+dnkSuIE3rm\ncgXcf7DcyEwXVkGEKvgyPPj1TtDRoTa1u/efFf7zZ0K+00WvD058+JOcB18V+HXHrKyLKvAz+YJR\nEEUjLLAHuayozBPj5QmJlbKG/aLL9BrdqNj0gmW2dQWZSIThguFyqpCb4R1AKVVC9yonohEkfExF\nEkWnUP95MM/nWtCIvBMTqSqPXAi1aAX1emYXmqTz2AvjtncvaYEWpgE+OlZC08XLu7B0Pko4Wyji\n2Njsgse45aHDo8bO59r+NqwfbBf2s2WwrNvbJNNanJmeMz6WWQDW4tYLlhgfP3JkTHijbb2z/r2y\na527HT5qde5uUxadutNZrcnWQ4E/ZZpiG1TFt0tSVCYtHipNC/SL5ng5NSBX0Fx50ae5KbbhumBt\nXVYu8Pedmnb1MxrBf07PdTdJOkFIwPDKFrLY2+/wWOAy8EN6DOis6G3Fit7SdSmdK+Cpk5O2/l2Y\nrQeAdYG/brAdG+ctCQDw3BlnswGqQdVhWlQGlWXdNEVnrsoj3XGQWKA2LKnfYmd5T6txLcgWirjv\nufNCf34ypDGZOpev7YXuXHvm1JStYAY6HDUaYVIFAFXg20SWgs9l4AfQnqNDFfy//ukBvPNru/GT\np057/rknxsvqx/I6K/iAKRLUjXob4i1HOvjrGQcNhRS6KAprPGIXlwHvXLEKyva6Fy4gMyIOnUs6\nGuQyG+JBZ1bsWuvcpkOvA2E8Bppi0QX2qnUD7di0hBT4ghpti0UNPz9wzvg8DAX+QEeT0ZMwPpvl\nEoBEQN9b+p7XA/r3uHv/GaE/O+wWnc7mOC5c3g2g1LP16Au1rw+cei9Z1FUFvk0W5uCLKfAnTQp+\nUKFNV3uOT+KnT5/Bu7+xFycdbt+b4RX8ABT4HhODZkIc+7V1qXvVVqcR4hG5LHxXHvzwx2S2N8Ww\npr80yKVQ1Bw1VaYa4PVTdq3n4zLtkAy5RQdYaA1Z09+GjaTYPCio0XbviUmMzk9K7WtL4JKVPUJ+\nrkyiEYZhSTYdTePPt411LvBfRAr8e589J7T3IuwWHYC36djx4U/4lKADqALfNuYm287muJEsk8zk\nkcm7W8HzcUnBy8DXsVJVCkUNu485m+BGyReKOD1V3t6sNA7cT7zmoM9kqEUnuAs2K9YPthue+ZHJ\nNCZcLFxTIR5ypdMl0KIT1uIO4Bd8Tixbsw3UZAsAF6/oNj4+dM6eLSXsFh2ALz6Gu5rR1hTDJmLR\nuffZc7jmE/fi1//hQfzS5sLHCmrPuXnLoHFfDTpLu+Q02o4ms0YR2JaI1j18YuvSTqP3Ynouj8de\nsJ8WU4uZEFtadXY5nHjtV4IOoAp825gtOpEI4/44E7PufOnm7Zqg8rILh3H3+67DF96wE6/cvtT4\nuluvNgCcnpozGjIHO5oCMdyEU/C9WnRCdsGKRyNG7Bfg7m/LDXkKqT2DLubdNNk2gkUHcG/ZaqQm\nW6DkQ05ES7fK8zMZW4u+RtjFodfCtQOl3Zz1g+2G5zhbKOLkRBpPnpzCx396wPXvuYvYPm69YMj1\nz/EbWVGZdMbAhiUdiNR5wcMYwy1E4LtLUJqOpmkNEUhw6apexKOlv9HBs0mcn6meQDfp05ArQBX4\ntrFKROEbbd3FCtICIsgefKB0sXnJtiG87MLyRdht2goQrAQdHerBd1PcTYfYogPwRZ2TwT46qUz4\n1Vveg784p7gCwDaXTdd8TGb4zgEz0Qgz7EpAKSKyGsWiqXAJ6XtAi491A6VGz+Z4FG/atWbBYw+c\nnnZl3ThyPmm8n83xCK4hUZxBZ5mkqExqz6m3/16H9+Gf9TQnRSedK0CfI9gcjyAeDWc52pKIcray\nR2rsZvERmcqiU3fWD7ZznnsdET58zqLTElyLDoUvAqddn+xBStDR8ZqFH9aYTB1qy3jGhYJPhxyF\nVb2lfzevMZlhfQ8A/jx/9vQ08jYLuEZZ4FB0BRsAjtSw6ZgtSmGxnJjRbRkAOGvOX77iAjz+57fg\ngQ/diOH5x+QKGo6OOo/NpKks124YCNXcDFrgj0zIUvCDERd6xZo+w244Mpnm5te4JewJOhQnPnzq\nwe+xqCtFogp8GzTHo4hZrC6FFPhpul0TjoN8eU+LMQxoKp1zvT1JE3SCouBzcaAu8v7DPHobALYt\n86bgN0JEIh+TuThTdIDS9U0v8jL5Io7UUK51aJJSmF8/RVewAeD50RoFfoNYlN5w5SpcvKIb128c\nwKsuWcZ9r7+9CSt6WzlLn5tUHZpKdN3GAfdPtg7QYVciLTpcgs5QMBT8RCzCxSgfFJCgNNMADbY6\n/MCr6j58atExW79Fowp8D4go8A8TNWigo6nKI4MDY4z354648+EHLUEHMFl0PCr4YbxobR7qMBTH\nF0ZnuWLVDo0Qkeh1anOjFHgAcAF3nttb8HELnBApstXgFfzqCx1ukR/Ca4DOqr42/OBdV+Mrb7m8\notWK5uI7TdXJF4pccy5VQcMA9eCfmhJT4Guaxr2PQbHoAHyaj4iI1DBHSpu5eEW3MUPn6Fiq6oJP\nNdmGBK8F/lyugD3HyoNTLl0d/HgwHT5S0Z0Pn3rwl/c2nkUnbCk6QGm3at18MaNpJW+tExohIpE2\n2Xr14If9xuXGh8/t4oR0kWfGiYIf9mxvJ3jJxd93atpQcZd0NmEt6XMIAzRF5/RkOTDCCyOTacPm\n2N0aD5ToJzoitZHOk0QsgstW9xqfV7PpTCgPfjgY7CyffDTu0S67j00gO+9rXT/YjsGO5hr/IjhQ\nK4cbrzYAnCA+vuAo+B4tOg1w0dpm6rFwQrLBmmydKviNkgyh4yZJZ7YBLTpUwT86mqraj9BIOzi1\n4Iq+s84m21J7zq51/YGd4l6JlkTUCNrIF7Wa6Sl2oNaXjUs6AvWebOLsWN6nGDfKTpfOVTbjMlWK\nTkhYTopSqkbbhR4EYdue5DOynSv4c7mCcUGMRpjRrFVvujwq+NMNkOtLp5g+7TAlqRFy8LlBVw5z\n8DP5oqHkJaIRY65AWKEK/oFT0yjaUClnG7DJtqM5jsF5NVWPh6xE2PtwnEBjM4+OzTqaeEzvf1eF\n7P6nQ3347/r6Hhw+503Zfu5MuXAOkj0HADYOlp/PkXNJ2033leB2uxvgPKE+/EerKPhcik6bUvAD\nC01+cdNVzisY4brArR1oNzxnZ6czjtULOgF3aXezZRNzPaArajf+67Cn6ADARcvLg32eODFZ5ZEL\naYT879ZE1BhDP5crOhpi12gJMkOdzYYVcSaTx3EbQkYjKviAfZtOchEp+M3xKFb1lS19h20OAsvm\ni3j8aHlIYtjufzp0YbL72ARe9pkH8Z3dJ13/PE7BD0iDrU5XaxxDnSUhLlso4uiYtyn2jTDFlrJt\naach6JyamqvYw8dbdJSCH1iW9bRA30E7PZV2lAM8M5fDUydL6ihjpRiqMBGNMGwZdq/icwk6AbHn\nACaLjgsFvxEmWF64rMsocA+fSzpa6PBNtuEscBljnE3n7JT9xWujJOjolBrqne3opBogA94Ku422\nybnGsh7UYiOJcnzOpjf7yZOTSM+r/St7W7nd8DDxwRdvwrtv3mBcL7OFIv7s+0+7EoeAYGbgU7im\nao+NtmEeCmlFLBrBhsHyuXDQYjdH0zSVohMWmmJRLJn3zRc1Z8MuHjs6bmzlXzDcKT0PVQZevNpB\nTNABSuqtPpUunSs42nI2+6/Dqkq0JKLc4s2Jit8ITbYAb1P6xcFztv9dMVeVSgAAIABJREFUIzXY\n6mx3uKMz2wB9GFbYV/Ab7xioxqYlzou+hw+Hd/eaEo9G8P5bN+LH776Gi5R90uHOJ1BKFTp8vnxc\nbQxIBj5lk4vFXCX48yScu91muKQhi/cnmckjP1/3tcSjaI7LvT6qAt8jK0j6C1Wla9EIFzgvPnx+\nim0wEnQAXb0tL7acpKiksgVj0RbmyXwAcMnKclG39/hElUfyNMIETwB4kWlyo10ascGSHgt7bBwL\njTDszArbCn6DLHLtstFFFn4j+O8pm4c6cQu5Ztg5T8zsOT6JbL7kAljS2SS9AdMNG10s5iox0wC7\n3WZqvT9+TrEFVIHvGao+U1W6FuYEgTBCEzaeHplyNNE2iEOudGhU5n0Hz1d5JE8jKRI7yOjtvccd\nKPh0imeIPej0Zv3IkTHbW+60wbJRiruLV5QL/H0j0zV7EhrlGDBjX8EPf6O9EzY5jE9MZwvcNaUR\nCnzALIo4V/C/9fgJ4+ObNg8KeU6i2eRxsBkl2WBNtgCwaaj6DseEjwk6gCrwPbO813mSzsRsFgfO\nlCwt0QjDZWt6a/yLYLJxqN1oKjkxnsaDh6tPcKPQxVDQ/Jc00eeD33kK7/zabltNxDPEe9sZ8hu7\nWcG3k54CNI56O9zVggvno2DzRQ2/eM6eTacRGyz72puwuq90jmYLReyvYsfL5AvIFUrHSizCkAjx\nLpaZZd0taJq/3o0ms5yXltIIUblOWN3fZtgaT03N1UyeevLkZGjjoavBiyL2r5lA6d7xk6dOG5+/\n5tIVQp+bKNYPtht9h0dHnaUmmaH3y0Y5T8wKvln0nPAxQQdQBb5naJLOCZtJOo8+Pwb9737R8q7Q\nHtxNsSju2Lnc+Pzv7jpoS8XXNC2wFh0AeN+tG7kBIz99+gze8KVf1mying75FFvKyt5WI+N5ei6P\n50erT+/UaST/9a0ubDqNGBEJAJeQ4mVPFXXS3IMRpBxvr0QiDGvIMKYj563PicVm0YlHI9zuxqEa\nyi61r1y6KjzDHWuxsrfVSJwqXTPtZ8X/+KnTRtPxxiXt3K5ZkGhNxLByXtQsasCR8+7z8BshkMLM\nsu4WI1xiIpXD+SQvDPqZgQ+oAt8zK1wo+Pc8W1YDrw6pPUfnD25ab6j4T56YxD0HaiudJZWndHK3\nN8Uw0B6caX1ASYn5+fuux2uJivLc2Rl8+/Hq8WeNlArAGHPsvS4WNaSIgh/2KaYv2lou8O977rzh\nj61Go6Xo6Oyw2ZPRCClK1VhHUjKer1DccBadBjoGqsE3F1Yv+qh9hV5jwg5jjDtPqi2EzXzzsbI9\n5zWXrgj0wliUD7+RJtnqMMb4pCHTuaA8+CFjOZeFX7vALxQ13EsK/Ju3BNNrZ5fhrhb81hUrjc/v\nvPtgza1JWiBsX9EVyItZV2scn7j9IvzRizYaX/vcvYeqbknygzvC7cEHeNXWjqc0Rd6blngU0Ujw\n/q5O2LSkw9hdmsnk8ejzlYeX6HApSg1y0wLsHwuNMAehGuuIgl8p851rtA75Qt8u1Jv97JnKFi5N\n07jrP7W1NAKXmGw6djh4dsZIp4pHGV69Y3mNf1FfNjlYzFWjERLnrODeH9MCiPPgtygFP/AMd7UY\nGbijySzXYGbF7mMTGJ8t/ZEHO5q4CLqw8o4b1qFlPu5p/+lp/GzfmaqP33OMKDgrgn2Bf8s1a9A/\nv8NwemoO3/jV8YqPnWmAKbYUp0k6qQazpzDGcOuWIePzv/jhM/itLz2K935jL0YqROLSXZxGKnA3\nD3UYg+1GJtM4Oz1n+bhZrsG2cV6/Do2PfezouOVjkg26i1MNmqj22NHK14qTE2mMJkv3v47mGGft\naQTcNNp+i6j3t16wxLD5BBWqUO8/7Swem8IX+OEXxHQ2Vmk6pwp+t1Lwg080wrhx1bUm2t69v1z8\n3nLBEkRCrnICwGBHM964a7Xx+Z13HzTiIq3Ye4IoOKuCvcBpTcTwzhvWGZ//w/8eQTprreI3mqdw\n+/JuYwz9c2dnuNdnxWwD2XN0qA//2FgKDx0eww+eOIW/+MEzlo/nLCoNVNzFohFuwnGlBR/nwW9A\ni84Va8uJL0+enLI8J2YaMB2kFpeu7jWErgOnpw0Rywy1+l28orsh7n8U8zVzpkbDcaGo4QdPjBif\nB7W5lkIV6vsPnse7vrbH8SR7TdNMYkjjXCuqJQ0dIsOvZE+xBVSBLwQ+C7+yTUfTNNxFmvVo8RB2\n3nbdWsNHd/hcEj96csTycZl8AftGyqv+iwOu4APA669YaYzoHk1m8O+PHLV8HN9kG35Foq0phk1D\nJWVO01BzeEsj+s8vW92Dbcs6F3z9F8+dw+mphYv5RkzR0bETndro6nVvW8JQ8QtFzVLFb8TzoBbt\nTTFsJ42hup1tz/EJvPxzD+AjP3wGhaJm8t8H/9rvFPM1U59WX4m9xyeMHY3+9iZcu2FA+nP0yvrB\ndm5i60+ePo1b7rwPT9d4rZRMvmgMfErEImiKNU6BTxX8Q2dnDMvy7mPjeGh+/hFjwE4fGsxVgS8A\nLgu/SoF/6FwSx8ZK329LREM74MqKnrYE3nrNGuPzT//8kGXqzL5T00ZE2pr+tsBvRwJAczyKP7x5\nvfH5F+47YqnMNFJMpg5tGvvhE9aLNh2usGkQ9TYWjeC779iFb/7+lfjqW68wLspFDfiORdN1Ixd3\ndpquUw3eZAvwgwkfOcL3ZZyZmjPSUGIRFvokKSfQ9+XhI6PQNA0f+NaTeGZkGl955Bi+t+ckd9zs\naKAGWwp3nhyrbm2k6Vy3bBkMRd9SNMLw7bdfxSXoTaVz+MsfWe9qWtHIu1z97QmjrpnNFgw756fu\nOmg85raLl2E16eeRhSrwBcAl6VSx6NCT+fpNAw21agWAt167Bl0tJeX62FgK39uzsACiF7xLAhoF\nZsUdO1cYOzUTqRy+/NDRBY9pxPzrV2xfanz83T0jeKFKXCa9aDeS/7opFsUVa/twzYZ+/M5Vq4yv\nf3v3yQUN5ckG60Og0MLlqZNTllY1Lia1gY4BirmQpXxnd9lPffma3kAGCMjiqrX0fRnDr14Y564X\nn/75IW6GQlCjIL2yg4uUtV/gh2lHv7s1gb+9Yzv+462XGzMQ9h6frBmRqsNl4DeIGKbDGON2OA6e\nncHDR0aN4abRCMN7bt7gy3NRBb4AaJJONQW/Ue05Op3Ncfz+dWuNzz97z+EFUy/3EpvHJSHKQE7E\nInjPzeVEnX+5//kFg25mGsyiAwBXru3D1etLN+5CUcNnfn7Q8nGZfAGfu/eQ8XnQok9F8eKtQ8bu\nzPHxFB59gVdwkw2WpEQZ7GjGqvmBV5l8EX/+g2cWzL2gk597ffCY1oPL1/QaSuu+U9PGdaBY1PAt\nsqvz2suC76cWyY5VPUZk8vPnZ/EP/3uY+/7IZNqwZawdaPMlB7weUOvFA4dGK9YEh88ljfkiLfEo\nrl4fvsjsazcMcLUMjfvcf2oa50zN+NNzOdx38Dx3nWgUMYxCffh37TuLT/7sOePzO3Yu90W9Bxqk\nwGeMLWeM/Rtj7BRjLMMYO8oY+zRjzJcKspaCXyhq+NIDzxse5miE4cZN4Y7HrMSbdq02BiSNTKbx\nB1/fy53ke0Oq4APAbRcvxdqB0ok5k8njXx543viepmk4N1N+nY2QoqPz/ls3GR//8MlTltnHH/vx\nATw578GMRRjecOXKBY9pBJrjUdx2yTLjc5qAsfvYODehudEUfAB41w1lq9p395zEN8jr33t8Aj+f\nn4PBGPDy7cO+Pz8/6GiOG1OONQ149PmSD//RF8ZwfL6Y62yO4cVbhyr+jEakOR7FzpV8cVuJRovH\npKzpb8Pl89Pp80UNn7nnkOXjqHp/3cZ+NMfDeb24gzQGf3/vCLL5Ij75s2fxss8+gJvvvA/7TpXu\nCxOzWbzycw/ijf/2K3z0v/Yb/6YRC3zqw//m4yeMGNRENII/9Em9BxqgwGeMrQOwG8CbAfwKwN8D\neB7AewA8whiTbnSnHvyT4ylO1Xr2zDRe/fmH8bGfHDC+ds36/oZVL9qaYngHSZ25e/9Z3HLnffjW\nYydwZmoOp6ZKRXBLPIrNZJUbBmLRCN57S1nF//JDRzE6P6num4+d4AabrCSLvrCzc1UPbtpcWpBq\nGnDnXbyK//29J/Efjx4zPv+Tl21pyAY6HZp08d/PnMHn7jmED33nSdz+hUeMXZxohHHTkBuFOy5d\njt8gOd0f+eE+Q7i48+7ycfGKi5Zi89DC5uRGgffhlwpZutj79YuXhbZg84JVX9n6wXYjalinkQZc\nWfGBW8v3ie/tOWk58ZUm6t16QXgXg9dtGMBwVymEYmw2iz/53tP4p18cAVDa1X7HV/dgMpXFe7/5\nBI6OLdzNoMPjGoVKDbS/efkKLCOpi7IJfYEP4J8ADAJ4t6Zpt2ma9mFN025CqdDfBODjsp9Af3vC\nyIGfyeQxlc4hky/gzrsP4uWffZBLH9k81IGPv2qb7KdUV9589Rpu+NX0XB4f+u5TeM0XHzG+dtHy\nLsSi4Tv8Xn7hsBETlsoWcMcXHsHXf3kcf/mjfcZjXr3DnwYaP3k/uWH9bN8ZvPs/9+LEeAof/a99\neP+3njS+92sXDuMtV6+uwzP0j23Luozc70y+iE/dfRDfevwk9HV9WyKKv7vjooaxaVEYY/jYbduM\nxXm2UMTr/vlR/MUPnjEU2wgD3nuLfypVPdhFJpA/fGQMU+kc/vuZcsG22Ow5OrvWLyzwX3/5Srzr\nxnXc1xpZwQdKcarXbigdI0Wt1H9AOT+TMeyqEQZDQAkj0QjD7aTh9rum3rvj4ym85NMPcLacazf0\n48ZNA/jtK1fh3Tc13rViy3An/ubVF+LmzYO4cdMAbtw0gDftWo0/fulmX58HM3sow8S8en8YwFEA\n6zRNK5LvdQA4DYABGNQ0rXJ3YPXfsXvHjh07du/eXfVxt955Hw7NTza8dkM/RibTeP58+VcmohH8\n4U3r8bbr1xk+xUbnocOj+JPvPW1sW1PeccM6/PFL/D3YRXHPgbN461cet/ze5qEOfP+dV6OlAdMz\n3vX1PfjJU6crfn/tQBt++K6rG7KwNfPtx0/gg995asHXb9g0gI+/6kJfVZp68MLoLF75uQcxY5ED\nf/vO5fi7O7bX4Vn5RzpbwPaP3mUkgu1c1YPd8/bDC4Y78dP3XFvPp1c3coUitn/0LqTmG7AT0Qh+\n+ac3oyURxa1/fx9OjKexrLsF93/oxlAkxnjhiROTuO0fHzI+f8nWIUTmb/3npjN4fP54uWJNL775\ntqvq8RSFcXwshev+9n+5r/W1JTBmMQ/h7devw4d9LnTDxM6dO7Fnz549mqbt9Pqzwm5+unH+/3fR\n4h4ANE2bYYw9BOBFAK4EcI/MJ7Kit9Uo8M3ewx0ru/HJ2y/C+sFwWVK8cvX6fvzPe6/DnXc/h399\n8AXQwJGw+e8pN29Zgk/efhH+v//azxU4HU0xfP4NOxuyuAeAT/zGRWiKRfC9PQvjMq/d0I+/vX37\noijugVIRm4hFjH4EBoadq3pww6aBRZGcsqa/Df/5+1fij779JJ4l0xpjPiZE1JOWRBSXrOzGL18o\n+e93k96ixareA0A8GsHla3rxi+dKau2tW5egZ74n6+u/eyX+Z98Z3LJlScMX90ApJeiWLYNGX0ql\nCe+NELixsq8Vu9b1GUkxTbEI/v2tl+P7e0bwpQdfMB535dpe/NGLNlb6MQrBhF1K1rv/rKM9AH1f\nTPoR9ZJtCz10rYko/uoVF+Dbb9+16Ip7nZZEFH/2axfge++82rC29Lc3YVcIEwMor7l0Be5+//W4\nZUtpazURjeBTr9mONQ1mzaG0N8Vw52suxpfffBmWznsuu1ri+NQd2/Hvb7kcQ/NfWwwwxvDrFy/D\nB1+8GR988Wb80Ys34cbNg4uiuNfZtqwLP/qDa/D+WzcaUXlvuWYNFzrQyNxhMXV0SWcTbrt4mcWj\nFw+6XSMWYfhdMhtlRW8rfvfatQ1nX6zGH714E5rjlcuszuYYXkmiiMPMO25YhwgrWY4+/qoLsXVp\nF/74pZuN+NRl3S343G/uCKU1N6yE3aLzzwB+D8DvaZr2JYvvfxzAnwL4U03T/m+Nn1XJg7N5x44d\nrbUsOpqmYd+paWOQVTTCcOnqngXNRYuZXKGIvccnsWGw3VB1wo6maTh4NonmeASr+hbPjSudLWDv\n8QlsXdqFrtbFodorKnN6Ko1jYylctrp3UaizQOncf3pkCifGS8lp0Qhw6epedc0H8MzIFFoTUawd\naLwGSqecGE/h6ZEpmEutyPw008HOxhFGDp9LAtA4QTNXKOKxF8bVvcImyqITQBhj2LasC9vm49MU\nC9G3bxsJxhiXebtYaElEQ78LoxDHcFcLhrsau+/ADGMMFy3vxkXLw2s3lIW6D5ZZ0du6aHa11lsk\n4sSjEXWvqBNhL/Cn5v9f6Wqif32ywvcNKq2W5pX9Hc6fmkKhUCgUCoVC4T9hN0Pp48Eqeez1bq9K\nHn2FQqFQKBQKhaKhCHuBr+cyvYgxxr2W+ZjMqwGkADzq9xNTKBQKhUKhUCjqQagLfE3TjgC4C8Bq\nAO8yffujANoA/IfbDHyFQqFQKBQKhSJshN2DDwDvBPAwgM8yxm4GcADAFShl5B8E8Gd1fG4KhUKh\nUCgUCoWvhFrBBwwV/1IA/z9Khf0HAKwD8BkAV2qaNla/Z6dQKBQKhUKhUPhLIyj40DTtBIA31/t5\nKBQKhUKhUCgU9Sb0Cr5CoVAoFAqFQqEoowp8hUKhUCgUCoWigVAFvkKhUCgUCoVC0UCoAl+hUCgU\nCoVCoWggVIGvUCgUCoVCoVA0EKrAVygUCoVCoVAoGghV4CsUCoVCoVAoFA2EKvAVCoVCoVAoFIoG\nQhX4CoVCoVAoFApFA8E0Tav3cwg0jLGxlpaW3i1bttT7qSgUCoVCoVAoGpQDBw4gnU6Pa5rW5/Vn\nqQK/BoyxDIAogCfr/VwUoWDz/P+freuzUIQFdbwonKCOF4UT1PESPlYDmNY0bY3XHxTz/lwanmcA\nQNO0nfV+IorgwxjbDajjRWEPdbwonKCOF4UT1PGyuFEefIVCoVAoFAqFooFQBb5CoVAoFAqFQtFA\nqAJfoVAoFAqFQqFoIFSBr1AoFAqFQqFQNBCqwFcoFAqFQqFQKBoIFZOpUCgUCoVCoVA0EErBVygU\nCoVCoVAoGghV4CsUCoVCoVAoFA2EKvAVCoVCoVAoFP+vvfsPlqus7zj+/pAElF8hkCJIyFx+ClSp\n0lQgEU1CG0BFQqVOp5WaCIJYfoSBThUqXGsROv0FxkFQJOlIIS0gUloUkXCFkJFC20CLJsRIoOFH\nEgQikISQ5Ns/nmcny3L25t79cXfvuZ/XzM7JPuc55/nu3u/efPfc55xjJeIC38zMzMysRFzgm5mZ\nmZmViAt8MzMzM7MScYFvZmZmZlYiTRf4kvaSdKakOyT9QtIGSeskLZJ0hqTCMSRNlnS3pJfyNo9L\nmiNpVEHfCZIulXRrHmOrpJB0cD9xfVDSlZJ+IOmF3H9Vk6/1nZK+ImmZpI2S1kj6F0mH1+l/mqS5\nkh6U9Oscw01NxjBB0o2SnpP0hqSVkq6WNK6g7xhJF0iaJ2mJpE05hjObiaEZzpeuzpf9JV0r6eH8\nHryRt3tQ0mxJY5qJpcH4nS/dmy89ecx6jwXNxNJg/M6X7s2X+dvJl5B0XzPxNBC/86VL8yX3303S\nFZKW5phflnSPpOObiWPEiIimHsDngQCeA/4JuBK4EXglt99GvqFW1TanAJuB14DvAH8DLM39by0Y\nY2ZetxVYAbycnx/cT1xX5z6bgCX536uaeJ07AYvyfh4B/hq4GXgTeB04umCbyrivAj/P/76piRgO\nAlbn/XwfuApYmJ8vBfaq6b9HXhfAC8Az+d9nNvtzd76UMl+mAuuAHwHXAV8Drq/Km4XAaOeL8yX3\n78nrlgC9BY/ThjJXnC9dny8z6+RJb34fA7jY+eJ8yf3HAU/k9f+b35MbgLW57YyhzJXh+GjFB2Q6\ncDKwQ037PmwrDD5Z1b47sAZ4A5hU1f4OYHHu/4c1+5oAHAfsnp/3DeAD8n7gA8CO+XmzH5AvVT7A\n1a81f9gjJ2LtezANOAQQqXhq9gNyT97HeTXtf5/br6tp3xE4Cdg3P++l8wW+86W782WHgv2MAe7P\n23zK+eJ8ye09uX3+UOaE82V45ks/+9kDWJ9/BuOdL86X3H5Nbr+dqgNLwN75Z7MemDCU+TLcHu3d\nOVySf0Bzq9o+m9v+saD/9LzuJ9vZ73Y/IAXbNPwByQn+dN7HAQXrH8jrpvWzj6Y+IKRvvwE8VfBB\n3I10NOF1YJd+9tFLhwt858vwyZeabS7I+7u003nifOmOfKELC3znS/fmSz/7Oi/v65ZO54jzpXvy\nhW1fsH6zYH9z8rrLOp0n3fxo90m2b+bl5qq26Xn5w4L+D5C+lU2WtFM7Axukg4CJwJMR8VTB+h/k\n5fSCda0yLS9/FBFbq1dExKvAQ8DOwDFtjKHdnC+t07J8yfNKP5qfPt7KIJvkfGmdZvLl3ZLOlnRJ\nXh7Zxjib4XxpnVb+f/S5vPxW68JrCedL6zSSL/vk5S8L9ldp81z8frStwJc0GviT/LT6w/CevHyy\ndpuI2Ez6hjcaOLBdsTWgbszZ8rw8tOQxtI3zpXtikDReUm8+Ieta0vzIGcDNEXFX60MdPOdLV8Xw\ne6RzNq7Iy8ck3S9pYmtDbJzzpTtjkHQs8D5S8Xl/i2JrmvOlK2J4MS8PKOhfeX/fU7DOsnYewb8K\neC9wd0TcU9U+Ni/X1dmu0r5HuwJrQDfE3A0xtJPzpXtiGA9cDlwGnEM6AvS3wKwWxtcs50vnY1gP\nfBX4bdIJceOAj5DO15gK3Cdpl5ZH2hjnS3fGcFZefrvpiFrL+dL5GP49L79SfXUiSb8BXJifFl59\nx5LR7dippPOBi0hH/k5vxxitJqm3oHl+RKwcovF7KCigIqJ3KMbvJOdLQ+P30KZ8iYilaQiNAvYD\nTgX+EviQpI9FxEvNjtEM50tD4/fQ4nyJiDWkL4HVHpA0g3TFjqOBM0kny3WM86Wh8Xto8/9HksYC\nnyJdKWZ+q/bbLOdLQ+P30Pp8uQw4ATgNWJIvoboL6cTgZ0nTjrbW39xaXuBLOpf0C/1nwPEFxUDl\nm9pYilXaX2l1bNtxeUFbH7CSoYm5p04MvXnZre9bU5wvDeupE0NvXjYdQ0RsIZ3odI2k1cAtpEL/\n3EHG2jLOl4b11ImhNy9bFkNEbJZ0A6nA/zAdLPCdLw3rqRNDb162IoZPk+ZdL4iIF/vpN2ScLw3r\nqRNDb14OOoaIeF7S7wBfBj4OfIE0beefST+j5aQrGlkdLS3wJc0B/oF0zdLj8xGeWsuASaS5Vv9Z\ns/1o0nyrzRSfWNE2EaF+Vi/Ly3pz1A7Jy3rzywYyfh/pbPeOxTDUnC/DKl8qJ2JNHWD/lnO+DKt8\nWZuXHZui43zp+nypnFx7/cAjax/nS/flS0SsJh1QestBJUmVE4IfGVSgI0zL5uBL+nPSh2MJ6XJL\n9b5ZLczLEwvWfZj0jX5xRLzRqthaYAXpSOahkopO+DgpLxcWrGuVyglIM2rvridpN2AKaU7sT9sY\nQ8s4X4DhlS/75eXmfnu1ifMFGF75UrkaxpAWOhXOF6CL80XS0cBvkU6u7WtjnAPifAG6OF8KVE6A\nvrk14ZVUK661SfoTSgCPAntup+/upKM7A75RRME++hjC68jm7Qd9o4ia7afS4RuL0CXXwXe+dGe+\nAEcBowr2sytwb97mCueL86UqX4pujHY8sDFvM9n54nwp2PY7uc9FQ50fzpfhkS+kA9C7FuzndNLc\n+4f6i9mPSLdgboakz5BOkNkCzKX4LOmVETG/apuZpFtAbwQWAC8BnyBd8ug20t0y3xKYpPlVT08E\n3gV8j3QbZYAbImJRVf/DgC9WbfMZ0jfEW6vaLo4Bzv3L17VdCEwm/SK4j3SSxx+QThKaHhEP12wz\nk3SbakjXdD2BdETrwdz2YkRcPJDx8/4OIv0S2Ru4k3T76KNJ15h9kvSf6a9qtvkicFh++n7SUZPF\nbLss1aKIuGGgMTTL+dK9+SLp+6QjKYvZdqfA/UlHePbI7SdExGsDjaFZzpeuzpc+0p/WFwOrcvOR\nbLue9pcj4q8GOn4rOF+6N1+qttsdeI40RXjCQF9zOzhfujdfJO0KrCYdXFpBKuqnAMfmbX83Ip4b\n6PgjUrPfENh2VLi/R1/BdlOAu4GXgQ3A/5AuffS2I4i5//bGmFXTf+oAtukZ5GvdmXSS4XLSN/i1\npA/cEQ2+NysbeL/3B+YBz5M+mE8DVwPj6vTv204M89vxzdH5MvzyBfgYcBPpl+060o1e1gA/Jl3O\nbvRgx3e+lDpfzgD+jXQi32s55mdIJ8EdN9S54nzp7nyp2uacPF7H71zrfOnefAHGkP7Ss4x0l9vX\nSVOoLgF27nTuDIdH00fwzczMzMyse7TzRldmZmZmZjbEXOCbmZmZmZWIC3wzMzMzsxJxgW9mZmZm\nViIu8M3MzMzMSsQFvpmZmZlZibjANzMzMzMrERf4ZmZmZmYl4gLfzMzMzKxEXOCbmZmZmZWIC3wz\nMzMzsxJxgW9mNsJIWilp5Ugd38ys7Fzgm5mNcJJmSQpJszodi5mZNc8FvpmZmZlZibjANzMzMzMr\nERf4ZmYlpORcSU9I2ijpWUnfkDS2pl8fMC8/nZen6lQePVX9Rkv6gqSfSvq1pPWS/juP8bb/SwY6\nflX/sZL+TNJCSaskbZK0VtK/Sjq2pu+4PP4KSaqzv7vya5g0qDfOzKwEFBGdjsHMzFpM0jXA+cDz\nwG3Am8ApwMvAfsCmiOjJ8+5n5nV3AkuqdnN1RLwiaQxwF3ACsAzoAzYC04AjgZsi4vRGxq/qfwzw\nQH6syP0mAp8AdgJOjogfVvW/EZgNzIiIe2vG3h94ClgSES7wzWwMVTl8AAADxElEQVTEcYFvZlYy\nkiYDD5EK5Q9GxEu5/R3A/cAxwNOVAjsX+fOA2RExv2B/vcDlwDeAORGxJbePAr4FfBaYGRF3NjJ+\nXjcWGBMRL9aMPQH4D2BdRBxe1T4JeAS4PSJOqxPvWRHx7QG/cWZmJeEpOmZm5TM7L6+oFNcAEbER\n+NJgdpSn35wHvABcWCnu8/62ABcBAfxxM+NHxLra4j63ryL9BeAwSROr2h8FHgVOkbRPVbyjgDOA\nV4FbBvNazczKYnSnAzAzs5Y7Ki9/UrBuEbCloL2eQ4E9geXAX9SZ8r4BOLzqeUPjS5oCXAAcC+wN\n7FjTZT/gmarn1wI3kv6C8LXc9lFgAvDNiHit8BWZmZWcC3wzs/KpnMi6unZFRGyW9LYj5f3YKy8P\nIU17qWfXZsaXdCrpSP1G4F7S9J7Xga3AVOAjpLn41RYAfwd8TtJVEbEVOCuvu76fWM3MSs0FvplZ\n+azLy3cBv6xeIWk0MB5YNch93RERv9/G8b8KbAImRcTPa7a5nlTgv0VEbJA0H7gQmCHpCeAk4OGI\neGyAsZqZlY7n4JuZlc9/5eXbimLgQ8ComrbKlJnadoClwCvAMflqOu0YH+Bg4GcFxf0OeZt6vkk6\nB+Bs0tz7UfjovZmNcC7wzczKZ35eXippz0pjvorNlQX9f5WXE2tXRMRmYC6wL/B1Se+s7SNpX0lH\nNDE+wErgEEnvruovoBc4os42RMRy4D7g48DnSV9GFtTrb2Y2EvgymWZmJSTp66Sr32z3OvSSxpGm\nzGwGvku6Yg7A3IhYl4/c30a6Jv2zwMK83Js0N38KcGlEXNXI+Ln/2cB1wBrg9tx/Cqm4/zFwMjAt\nIvoKXuupwPeqYj5/8O+YmVl5uMA3MyuhfPT7T/PjQNJR+juAS4DHAGoK7BNJJ9G+D9glNx8QESur\n9vdpYBbwAdJJtWtJN5S6G/huRPxfo+PnbWYBc0hfGjYADwKXAZ/MsdUr8EeRvpSMB94bEU8M+I0y\nMyshF/hmZjasSToQ+AXwUEQc1+l4zMw6zXPwzcxsuLsYEOlOu2ZmI56P4JuZ2bCT72r7R6TpPLOB\nx4Gj8rXwzcxGNF8H38zMhqMDSVfkWU+6MdY5Lu7NzBIfwTczMzMzKxHPwTczMzMzKxEX+GZmZmZm\nJeIC38zMzMysRFzgm5mZmZmViAt8MzMzM7MScYFvZmZmZlYiLvDNzMzMzErEBb6ZmZmZWYm4wDcz\nMzMzKxEX+GZmZmZmJeIC38zMzMysRFzgm5mZmZmViAt8MzMzM7MS+X/IzNoeXik6hgAAAABJRU5E\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7a878f5f98>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 263,
       "width": 380
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rides[:24*10].plot(x='dteday', y='cnt')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dummy variables\n",
    "Here we have some categorical variables like season, weather, month. To include these in our model, we'll need to make binary dummy variables. This is simple to do with Pandas thanks to `get_dummies()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yr</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>cnt</th>\n",
       "      <th>season_1</th>\n",
       "      <th>season_2</th>\n",
       "      <th>...</th>\n",
       "      <th>hr_21</th>\n",
       "      <th>hr_22</th>\n",
       "      <th>hr_23</th>\n",
       "      <th>weekday_0</th>\n",
       "      <th>weekday_1</th>\n",
       "      <th>weekday_2</th>\n",
       "      <th>weekday_3</th>\n",
       "      <th>weekday_4</th>\n",
       "      <th>weekday_5</th>\n",
       "      <th>weekday_6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 59 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   yr  holiday  temp   hum  windspeed  casual  registered  cnt  season_1  \\\n",
       "0   0        0  0.24  0.81        0.0       3          13   16         1   \n",
       "1   0        0  0.22  0.80        0.0       8          32   40         1   \n",
       "2   0        0  0.22  0.80        0.0       5          27   32         1   \n",
       "3   0        0  0.24  0.75        0.0       3          10   13         1   \n",
       "4   0        0  0.24  0.75        0.0       0           1    1         1   \n",
       "\n",
       "   season_2    ...      hr_21  hr_22  hr_23  weekday_0  weekday_1  weekday_2  \\\n",
       "0         0    ...          0      0      0          0          0          0   \n",
       "1         0    ...          0      0      0          0          0          0   \n",
       "2         0    ...          0      0      0          0          0          0   \n",
       "3         0    ...          0      0      0          0          0          0   \n",
       "4         0    ...          0      0      0          0          0          0   \n",
       "\n",
       "   weekday_3  weekday_4  weekday_5  weekday_6  \n",
       "0          0          0          0          1  \n",
       "1          0          0          0          1  \n",
       "2          0          0          0          1  \n",
       "3          0          0          0          1  \n",
       "4          0          0          0          1  \n",
       "\n",
       "[5 rows x 59 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummy_fields = ['season', 'weathersit', 'mnth', 'hr', 'weekday']\n",
    "for each in dummy_fields:\n",
    "    dummies = pd.get_dummies(rides[each], prefix=each, drop_first=False)\n",
    "    rides = pd.concat([rides, dummies], axis=1)\n",
    "\n",
    "fields_to_drop = ['instant', 'dteday', 'season', 'weathersit', \n",
    "                  'weekday', 'atemp', 'mnth', 'workingday', 'hr']\n",
    "data = rides.drop(fields_to_drop, axis=1)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scaling target variables\n",
    "To make training the network easier, we'll standardize each of the continuous variables. That is, we'll shift and scale the variables such that they have zero mean and a standard deviation of 1.\n",
    "\n",
    "The scaling factors are saved so we can go backwards when we use the network for predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "quant_features = ['casual', 'registered', 'cnt', 'temp', 'hum', 'windspeed']\n",
    "# Store scalings in a dictionary so we can convert back later\n",
    "scaled_features = {}\n",
    "for each in quant_features:\n",
    "    mean, std = data[each].mean(), data[each].std()\n",
    "    scaled_features[each] = [mean, std]\n",
    "    data.loc[:, each] = (data[each] - mean)/std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splitting the data into training, testing, and validation sets\n",
    "\n",
    "We'll save the data for the last approximately 21 days to use as a test set after we've trained the network. We'll use this set to make predictions and compare them with the actual number of riders."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Save data for approximately the last 21 days \n",
    "test_data = data[-21*24:]\n",
    "\n",
    "# Now remove the test data from the data set \n",
    "data = data[:-21*24]\n",
    "\n",
    "# Separate the data into features and targets\n",
    "target_fields = ['cnt', 'casual', 'registered']\n",
    "features, targets = data.drop(target_fields, axis=1), data[target_fields]\n",
    "test_features, test_targets = test_data.drop(target_fields, axis=1), test_data[target_fields]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll split the data into two sets, one for training and one for validating as the network is being trained. Since this is time series data, we'll train on historical data, then try to predict on future data (the validation set)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Hold out the last 60 days or so of the remaining data as a validation set\n",
    "train_features, train_targets = features[:-60*24], targets[:-60*24]\n",
    "val_features, val_targets = features[-60*24:], targets[-60*24:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Time to build the network\n",
    "\n",
    "Below you'll build your network. We've built out the structure and the backwards pass. You'll implement the forward pass through the network. You'll also set the hyperparameters: the learning rate, the number of hidden units, and the number of training passes.\n",
    "\n",
    "<img src=\"assets/neural_network.png\" width=300px>\n",
    "\n",
    "The network has two layers, a hidden layer and an output layer. The hidden layer will use the sigmoid function for activations. The output layer has only one node and is used for the regression, the output of the node is the same as the input of the node. That is, the activation function is $f(x)=x$. A function that takes the input signal and generates an output signal, but takes into account the threshold, is called an activation function. We work through each layer of our network calculating the outputs for each neuron. All of the outputs from one layer become inputs to the neurons on the next layer. This process is called *forward propagation*.\n",
    "\n",
    "We use the weights to propagate signals forward from the input to the output layers in a neural network. We use the weights to also propagate error backwards from the output back into the network to update our weights. This is called *backpropagation*.\n",
    "\n",
    "> **Hint:** You'll need the derivative of the output activation function ($f(x) = x$) for the backpropagation implementation. If you aren't familiar with calculus, this function is equivalent to the equation $y = x$. What is the slope of that equation? That is the derivative of $f(x)$.\n",
    "\n",
    "Below, you have these tasks:\n",
    "1. Implement the sigmoid function to use as the activation function. Set `self.activation_function` in `__init__` to your sigmoid function.\n",
    "2. Implement the forward pass in the `train` method.\n",
    "3. Implement the backpropagation algorithm in the `train` method, including calculating the output error.\n",
    "4. Implement the forward pass in the `run` method.\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "hidden_inputs=None\n",
    "hidden_outputs=None\n",
    "final_inputs=None\n",
    "final_outputs=None\n",
    "error=None\n",
    "output_grad=None\n",
    "output_error_term=None\n",
    "hidden_error=None\n",
    "hidden_grad=None\n",
    "hidden_error_term=None\n",
    "delta_weights_h_o=None\n",
    "delta_weights_i_h=None\n",
    "n_records=None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(hidden_inputs)\n",
    "print(hidden_outputs)\n",
    "print(final_inputs)\n",
    "print(final_outputs)\n",
    "print(error)\n",
    "print(output_grad)\n",
    "print(output_error_term)\n",
    "print(hidden_error)\n",
    "print(hidden_grad)\n",
    "print(hidden_error_term)\n",
    "print(delta_weights_h_o)\n",
    "print(delta_weights_i_h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class NeuralNetwork(object):\n",
    "    def __init__(self, input_nodes, hidden_nodes, output_nodes, learning_rate):\n",
    "        # Set number of nodes in input, hidden and output layers.\n",
    "        self.input_nodes = input_nodes\n",
    "        self.hidden_nodes = hidden_nodes\n",
    "        self.output_nodes = output_nodes\n",
    "\n",
    "        # Initialize weights\n",
    "        self.weights_input_to_hidden = np.random.normal(0.0, self.input_nodes**-0.5, \n",
    "                                       (self.input_nodes, self.hidden_nodes))\n",
    "\n",
    "        self.weights_hidden_to_output = np.random.normal(0.0, self.hidden_nodes**-0.5, \n",
    "                                       (self.hidden_nodes, self.output_nodes))\n",
    "        \n",
    "        self.lr = learning_rate\n",
    "        \n",
    "        #### TODO: Set self.activation_function to your implemented sigmoid function ####\n",
    "        #\n",
    "        # Note: in Python, you can define a function with a lambda expression,\n",
    "        # as shown below.\n",
    "        self.activation_function = lambda x : 1/(1+np.exp(-x))  # Replace 0 with your sigmoid calculation.\n",
    "        \n",
    "        ### If the lambda code above is not something you're familiar with,\n",
    "        # You can uncomment out the following three lines and put your \n",
    "        # implementation there instead.\n",
    "        #\n",
    "        #def sigmoid(x):\n",
    "        #    return 0  # Replace 0 with your sigmoid calculation here\n",
    "        #self.activation_function = sigmoid\n",
    "                    \n",
    "    \n",
    "    def train(self, features, targets):\n",
    "        ''' Train the network on batch of features and targets. \n",
    "        \n",
    "            Arguments\n",
    "            ---------\n",
    "            \n",
    "            features: 2D array, each row is one data record, each column is a feature\n",
    "            targets: 1D array of target values\n",
    "        \n",
    "        '''\n",
    "        n_records = features.shape[0]\n",
    "        delta_weights_i_h = np.zeros(self.weights_input_to_hidden.shape)\n",
    "        delta_weights_h_o = np.zeros(self.weights_hidden_to_output.shape)\n",
    "        \n",
    "        for i in range(n_records):\n",
    "        #for X, y in zip(features, targets):\n",
    "            #### Implement the forward pass here ####\n",
    "            ### Forward pass ###\n",
    "            # TODO: Hidden layer - Replace these values with your calculations.\n",
    "            X = features[i]\n",
    "            y = targets[i]\n",
    "            X = np.expand_dims(X,axis=0)\n",
    "            y = np.expand_dims(y,axis=0)\n",
    "            #print('X',X.shape)\n",
    "            #print('y',y.shape)\n",
    "            #print('targets',targets.shape)\n",
    "            #print('self.weights_input_to_hidden',self.weights_input_to_hidden.shape)\n",
    "            #print('self.weights_hidden_to_output.',self.weights_hidden_to_output.shape)\n",
    "\n",
    "            hidden_inputs = np.dot(X, self.weights_input_to_hidden) # signals into hidden layer OK\n",
    "            #print('hidden_inputs',hidden_inputs.shape)\n",
    "\n",
    "            hidden_outputs = self.activation_function(hidden_inputs) # signals from hidden layer OK\n",
    "            #print('hidden_outputs',hidden_outputs.shape)\n",
    "\n",
    "            # TODO: Output layer - Replace these values with your calculations.\n",
    "            final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output) # signals into final output layer OK\n",
    "            #print('final_inputs',final_inputs.shape)\n",
    "\n",
    "            final_outputs = self.activation_function(final_inputs) # signals from final output layer OK\n",
    "            #print('final_outputs',final_outputs.shape)\n",
    "\n",
    "            #### Implement the backward pass here ####\n",
    "            ### Backward pass ###\n",
    "\n",
    "            # TODO: Output error - Replace this value with your calculations.\n",
    "            if y.shape[0] != final_outputs.shape[0]:\n",
    "                print('!!!y',y.shape)\n",
    "                print('!!!final_outputs',final_outputs.shape)\n",
    "            error = (y - final_outputs) # Output layer error is the difference between desired target and actual output.\n",
    "            #print('error',error.shape) # OK\n",
    "\n",
    "            # TODO: Calculate the hidden layer's contribution to the error\n",
    "            output_grad = final_outputs*(1-final_outputs) #OK\n",
    "            #print('output_grad',output_grad.shape)\n",
    "            output_error_term = error*output_grad #OK\n",
    "            #print('output_error_term',output_error_term.shape)\n",
    "\n",
    "            # TODO: Backpropagated error terms - Replace these values with your calculations.\n",
    "            hidden_error = np.dot(output_error_term,self.weights_hidden_to_output.T)\n",
    "            #print('hidden_error',hidden_error.shape)\n",
    "            hidden_grad = hidden_outputs*(1-hidden_outputs)\n",
    "            #print('hidden_grad',hidden_grad.shape)\n",
    "            hidden_error_term = hidden_error*hidden_grad\n",
    "            #print('hidden_error_term',hidden_error_term.shape)\n",
    "\n",
    "            # TODO: Calculate change in weights for hidden layer to output layer\n",
    "            delta_weights_h_o += np.dot(hidden_outputs.T, output_error_term) #OK\n",
    "            #print('delta_weights_h_o',delta_weights_h_o.shape)\n",
    "\n",
    "            # TODO: Calculate change in weights for input layer to hidden layer\n",
    "            delta_weights_i_h += np.dot(X.T, hidden_error_term)\n",
    "            #print('delta_weights_i_h',delta_weights_i_h.shape)\n",
    "\n",
    "        # TODO: Update the weights - Replace these values with your calculations.\n",
    "        self.weights_hidden_to_output += self.lr * delta_weights_h_o / n_records # update hidden-to-output weights with gradient descent step\n",
    "        self.weights_input_to_hidden += self.lr * delta_weights_i_h / n_records # update input-to-hidden weights with gradient descent step\n",
    "        \n",
    "        print('Finish training******')\n",
    "        \n",
    "    def run(self, features):\n",
    "        ''' Run a forward pass through the network with input features \n",
    "        \n",
    "            Arguments\n",
    "            ---------\n",
    "            features: 1D array of feature values\n",
    "        '''\n",
    "        \n",
    "        #### Implement the forward pass here ####\n",
    "        # TODO: Hidden layer - replace these values with the appropriate calculations.\n",
    "        hidden_inputs = np.dot(features, self.weights_input_to_hidden) # signals into hidden layer\n",
    "        hidden_outputs = self.activation_function(hidden_inputs) # signals from hidden layer\n",
    "        \n",
    "        # TODO: Output layer - Replace these values with the appropriate calculations.\n",
    "        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output) # signals into final output layer\n",
    "        final_outputs = self.activation_function(final_inputs) # signals from final output layer \n",
    "        \n",
    "        return final_outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def MSE(y, Y):\n",
    "    return np.mean((y-Y)**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Unit tests\n",
    "\n",
    "Run these unit tests to check the correctness of your network implementation. This will help you be sure your network was implemented correctly befor you starting trying to train it. These tests must all be successful to pass the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "...FF"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finish training******\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================================\n",
      "FAIL: test_run (__main__.TestMethods)\n",
      "----------------------------------------------------------------------\n",
      "Traceback (most recent call last):\n",
      "  File \"<ipython-input-19-4cfb5a8ab20a>\", line 55, in test_run\n",
      "    self.assertTrue(np.allclose(network.run(inputs), 0.09998924))\n",
      "AssertionError: False is not true\n",
      "\n",
      "======================================================================\n",
      "FAIL: test_train (__main__.TestMethods)\n",
      "----------------------------------------------------------------------\n",
      "Traceback (most recent call last):\n",
      "  File \"<ipython-input-19-4cfb5a8ab20a>\", line 43, in test_train\n",
      "    [-0.03172939]])))\n",
      "AssertionError: False is not true\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 5 tests in 0.004s\n",
      "\n",
      "FAILED (failures=2)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.runner.TextTestResult run=5 errors=0 failures=2>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import unittest\n",
    "\n",
    "inputs = np.array([[0.5, -0.2, 0.1]])\n",
    "targets = np.array([[0.4]])\n",
    "test_w_i_h = np.array([[0.1, -0.2],\n",
    "                       [0.4, 0.5],\n",
    "                       [-0.3, 0.2]])\n",
    "test_w_h_o = np.array([[0.3],\n",
    "                       [-0.1]])\n",
    "\n",
    "class TestMethods(unittest.TestCase):\n",
    "    \n",
    "    ##########\n",
    "    # Unit tests for data loading\n",
    "    ##########\n",
    "    \n",
    "    def test_data_path(self):\n",
    "        # Test that file path to dataset has been unaltered\n",
    "        self.assertTrue(data_path.lower() == 'bike-sharing-dataset/hour.csv')\n",
    "        \n",
    "    def test_data_loaded(self):\n",
    "        # Test that data frame loaded\n",
    "        self.assertTrue(isinstance(rides, pd.DataFrame))\n",
    "    \n",
    "    ##########\n",
    "    # Unit tests for network functionality\n",
    "    ##########\n",
    "\n",
    "    def test_activation(self):\n",
    "        network = NeuralNetwork(3, 2, 1, 0.5)\n",
    "        # Test that the activation function is a sigmoid\n",
    "        self.assertTrue(np.all(network.activation_function(0.5) == 1/(1+np.exp(-0.5))))\n",
    "\n",
    "    def test_train(self):\n",
    "        # Test that weights are updated correctly on training\n",
    "        network = NeuralNetwork(3, 2, 1, 0.001)\n",
    "        network.weights_input_to_hidden = test_w_i_h.copy()\n",
    "        network.weights_hidden_to_output = test_w_h_o.copy()\n",
    "        \n",
    "        network.train(inputs, targets)\n",
    "        self.assertTrue(np.allclose(network.weights_hidden_to_output, \n",
    "                                    np.array([[ 0.37275328], \n",
    "                                              [-0.03172939]])))\n",
    "        self.assertTrue(np.allclose(network.weights_input_to_hidden,\n",
    "                                    np.array([[ 0.10562014, -0.20185996], \n",
    "                                              [0.39775194, 0.50074398], \n",
    "                                              [-0.29887597, 0.19962801]])))\n",
    "\n",
    "    def test_run(self):\n",
    "        # Test correctness of run method\n",
    "        network = NeuralNetwork(3, 2, 1, 0.5)\n",
    "        network.weights_input_to_hidden = test_w_i_h.copy()\n",
    "        network.weights_hidden_to_output = test_w_h_o.copy()\n",
    "\n",
    "        self.assertTrue(np.allclose(network.run(inputs), 0.09998924))\n",
    "\n",
    "suite = unittest.TestLoader().loadTestsFromModule(TestMethods())\n",
    "unittest.TextTestRunner().run(suite)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the network\n",
    "\n",
    "Here you'll set the hyperparameters for the network. The strategy here is to find hyperparameters such that the error on the training set is low, but you're not overfitting to the data. If you train the network too long or have too many hidden nodes, it can become overly specific to the training set and will fail to generalize to the validation set. That is, the loss on the validation set will start increasing as the training set loss drops.\n",
    "\n",
    "You'll also be using a method know as Stochastic Gradient Descent (SGD) to train the network. The idea is that for each training pass, you grab a random sample of the data instead of using the whole data set. You use many more training passes than with normal gradient descent, but each pass is much faster. This ends up training the network more efficiently. You'll learn more about SGD later.\n",
    "\n",
    "### Choose the number of iterations\n",
    "This is the number of batches of samples from the training data we'll use to train the network. The more iterations you use, the better the model will fit the data. However, if you use too many iterations, then the model with not generalize well to other data, this is called overfitting. You want to find a number here where the network has a low training loss, and the validation loss is at a minimum. As you start overfitting, you'll see the training loss continue to decrease while the validation loss starts to increase.\n",
    "\n",
    "### Choose the learning rate\n",
    "This scales the size of weight updates. If this is too big, the weights tend to explode and the network fails to fit the data. A good choice to start at is 0.1. If the network has problems fitting the data, try reducing the learning rate. Note that the lower the learning rate, the smaller the steps are in the weight updates and the longer it takes for the neural network to converge.\n",
    "\n",
    "### Choose the number of hidden nodes\n",
    "The more hidden nodes you have, the more accurate predictions the model will make. Try a few different numbers and see how it affects the performance. You can look at the losses dictionary for a metric of the network performance. If the number of hidden units is too low, then the model won't have enough space to learn and if it is too high there are too many options for the direction that the learning can take. The trick here is to find the right balance in number of hidden units you choose."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 0.0% ... Training loss: 1.052 ... Validation loss: 1.287X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 1.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 2.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 3.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 4.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 5.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 6.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 7.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 8.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 9.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 10.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 11.0% ... Training loss: 1.052 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 12.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 13.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 14.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 15.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 16.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 17.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 18.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 19.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 20.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 21.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 22.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 23.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 24.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 25.0% ... Training loss: 1.051 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 26.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 27.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 28.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 29.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 30.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 31.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 32.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 33.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 34.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 35.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 36.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 37.0% ... Training loss: 1.050 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 38.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 39.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 40.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 41.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 42.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 43.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 44.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 45.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 46.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 47.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 48.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 49.0% ... Training loss: 1.049 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 50.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 51.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 52.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 53.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 54.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 55.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 56.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 57.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 58.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 59.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 60.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 61.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 62.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 63.0% ... Training loss: 1.048 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 64.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 65.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 66.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 67.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 68.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 69.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 70.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 71.0% ... Training loss: 1.047 ... Validation loss: 1.286X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 72.0% ... Training loss: 1.047 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 73.0% ... Training loss: 1.047 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 74.0% ... Training loss: 1.047 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 75.0% ... Training loss: 1.047 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 76.0% ... Training loss: 1.047 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 77.0% ... Training loss: 1.047 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 78.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 79.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 80.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 81.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 82.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 83.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 84.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 85.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 86.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 87.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 88.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 89.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 90.0% ... Training loss: 1.046 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 91.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 92.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 93.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 94.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 95.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 96.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 97.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 98.0% ... Training loss: 1.045 ... Validation loss: 1.285X.shape (128, 56)\n",
      "y.shape (128,)\n",
      "Finish training******\n",
      "Progress: 99.0% ... Training loss: 1.045 ... Validation loss: 1.285"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "\n",
    "### Set the hyperparameters here ###\n",
    "iterations = 100\n",
    "learning_rate = 0.01\n",
    "hidden_nodes = 3\n",
    "output_nodes = 1\n",
    "\n",
    "N_i = train_features.shape[1]\n",
    "network = NeuralNetwork(N_i, hidden_nodes, output_nodes, learning_rate)\n",
    "\n",
    "X=None\n",
    "y=None\n",
    "losses = {'train':[], 'validation':[]}\n",
    "for ii in range(iterations):\n",
    "    # Go through a random batch of 128 records from the training data set\n",
    "    batch = np.random.choice(train_features.index, size=128)\n",
    "    X, y = train_features.ix[batch].values, train_targets.ix[batch]['cnt']\n",
    "    print('X.shape',X.shape)\n",
    "    print('y.shape',y.shape)\n",
    "                             \n",
    "    network.train(X, y.values)\n",
    "    \n",
    "    # Printing out the training progress\n",
    "    train_loss = MSE(network.run(train_features).T, train_targets['cnt'].values)\n",
    "    val_loss = MSE(network.run(val_features).T, val_targets['cnt'].values)\n",
    "    sys.stdout.write(\"\\rProgress: {:2.1f}\".format(100 * ii/float(iterations)) \\\n",
    "                     + \"% ... Training loss: \" + str(train_loss)[:5] \\\n",
    "                     + \" ... Validation loss: \" + str(val_loss)[:5])\n",
    "    sys.stdout.flush()\n",
    "    \n",
    "    losses['train'].append(train_loss)\n",
    "    losses['validation'].append(val_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nsLBQbdq0UYcOHRSJNNx5dQI+AAC7sGg0qi+++EKbN29u7KoAXnHOaevWrdq6dat++OEH7bnnng0W\n8gn4AADswtavX6/NmzcrPz9fXbp0UatWrRr0TCPgq2g0qh9++EFr1qzR5s2btX79ehUVFTXIvvkL\nBgBgF1ZaWipJ6tKli9q0aUO4B7IkEomoTZs26tKli6TKv7UG2XeD7QkAADQ527ZtkyS1atWqkWsC\n+Cn+txX/W2sIBHwAAHZh8QG1nLkHdg4zk6QGHbzOXzMAAACwk8QDfkMi4AMAAAAeIeADAAAAHiHg\nAwAANAGbNm2SmWnEiBH1LuuII45Q69ats1Cr7Jk6darMTE8++WRjV8V7BHwAALBLM7NavWbMmNHY\nVQZ2iAddAQCAXdof/vCHKvPuuOMObdiwQZdffrl22223pGWHHXbYTqlHq1attGzZsqyceX/qqaca\n9LaMaFoI+AAAYJc2efLkKvNmzJihDRs26IorrlDPnj0bpB5mpj59+mSlrL322isr5SA30UUHAACg\nDuL93Lds2aKJEydq3333VUFBgS699FJJ0rfffqtbbrlFgwcPVrdu3VRQUKDOnTvr9NNP1+LFi6uU\nl6kP/oQJE2Rmeuedd/Too4+qf//+atGihYqKinTuuedq7dq1GesWNnfuXJmZbr/9dr311ls66aST\n1LZtW7Vu3VonnHBC2jpJ0ueff65zzjlHRUVFatmypfr376/HHnssqbz6WrRokUaPHq2ioiIVFhZq\n77331hVXXKFvvvmmyrqrV6/W5Zdfrv32208tW7ZU+/bt1bdvX11wwQX64osvEutFo1E9+OCDGjBg\ngIqKitSiRQv16NFDp5xyioqLi+td56aMM/gAAAB1FI1GNWLECH344Yc66aST1LFjx8TZ83fffVd/\n+MMfNGTIEI0ePVrt2rXTp59+qjlz5mju3Ln6xz/+oUGDBtV4X7feeqvmzp2r0aNHa+jQoVq4cKFm\nzpyppUuX6p133lFeXl6NylmwYIEmTpyoIUOG6OKLL9Ynn3yi4uJiDRkyREuXLk06+79q1Sodc8wx\nWr16tY4//ngdeeSR+vLLLzV+/HidfPLJtfuxMnj88cd19tlnKy8vT2PHjtUee+yhN954Q3feeadm\nz56thQsXqlu3bpKkjRs3asCAAVq9erWGDx+uMWPGqKysTJ999pmefPJJnXvuudpzzz0lSVdccYXu\nvvtu9e7dWz/96U/VunVrrV69Wm+++aaKi4s1ZsyYrNS/KSLgAwAA1NGWLVtUWlqqpUuXVumr369f\nP61Zs0bt27dPmv/xxx9rwIABuuqqq/T222/XeF/z5s3Te++9p/32209S7MmoY8aM0Zw5c/Tiiy/q\nlFNOqVE5s2fP1hNPPKEzzjgjMW/KlCmaMGGC7rnnHt16662J+VdddZVWr16tG264QZMmTUrM/+Uv\nf6njjjuuxnXPZP369brwwgtlZlqwYIGOOOKIxLJJkybppptu0qWXXqqnn35akvTss89q1apVmjhx\nom688caksrZu3ary8nJJlWfv99lnH/373/9WYWFh0rrr1q2rd92bMgI+AADIqOf/92xjV6HGVt5y\naqPs9+abb64S7iWpQ4cOadffZ599NGrUKE2fPl3r16/PuF6q3/72t4lwL8X67F944YWaM2eO3nrr\nrRoH/JNOOikp3EvSxRdfrAkTJuitt95KzCstLdXTTz+tTp066be//W3S+kcffbTGjh2rWbNm1Wif\nmTzxxBMqLS3VRRddlBTuJenaa6/VtGnTNHv2bK1bt05FRUWJZS1atKhSVvPmzZM+m5kKCgrSXtkI\nl+Uj+uADAADUw1FHHZVx2fz583Xaaadpjz32UEFBQeJWm9OnT5ckffnllzXeT2oAlpTojvLdd9/V\nq5w2bdqoXbt2SeUsXbpU5eXl6t+/f5XwLCkrZ/CXLFkiSRo2bFiVZc2bN9fAgQMVjUb1/vvvS5JO\nPPFE7b777po0aZJGjBihe+65R++9956i0WjStpFIROPGjdOyZct00EEHadKkSXrppZdUWlpa7zrn\nAs7gAwAA1FHLli3Vpk2btMtmzpyp8847T61bt9aJJ56oXr16qVWrVjIzvfTSS1q0aFGtbmWZ7ipB\nfn4sylVUVNSrnHhZ4XI2bNggSercuXPa9TPNr434Prp27Zp2eXz+999/Lyl25v3NN9/U5MmTNXfu\nXD377LOJulx22WW65pprEmfsH3jgAfXp00cPP/ywbrrpJklSs2bNNGrUKE2ZMsXrOw0R8AEAQEaN\n1e0lV5hZxmUTJ05UmzZt9O6772rvvfdOWrZixQotWrRoZ1evXtq2bStJ+vrrr9MuzzS/Ntq1aydJ\nWrNmTdrlX331VdJ6ktSrVy89/PDDikajWrp0qebNm6epU6fq2muvVV5enq655hpJsTB/9dVX6+qr\nr9aaNWtUUlKimTNn6qmnntLy5cv1/vvv13hgcq6hiw4AAECWlZeX67PPPtNhhx1WJdyXlZU1+XAv\nSQcffLDy8/O1ePFibd26tcryBQsW1Hsfhx9+uCTplVdeqbJs27ZtWrRokcws7cPFIpGIDjnkEF15\n5ZWaO3euJGW8/WWXLl00duxYzZ49W0cddZT+85//6KOPPqp3/ZsqAj4AAECW5efnq3v37vrPf/6T\ndMeWaDSq3/3ud/r0008bsXY106ZNG40ZM0Zr167VbbfdlrTszTff1BNPPFHvfZx55plq3bq1pk+f\nnuhnH3fzzTfrq6++StwfX5L+9a9/pb0DTvxqQsuWLSXFnikQHjAct23btkS3oHQDdX1BFx0AAICd\n4Morr9SECRN0yCGH6LTTTlMkEtGrr76qlStX6uSTT9bzzz/f2FWs1pQpU7RgwQJdd911eu2113Tk\nkUdq1apVevzxxzVy5EgVFxcrEqn7+eIOHTroL3/5i84991wdc8wxGjt2rLp376433nhD8+fPV48e\nPTR16tTE+nPmzNENN9ygY489Vr1791ZRUZE+++wzzZ49W3l5eZowYYKkWJ/9AQMGqE+fPjr88MPV\no0cPbd68WS+88IJWrFihs846Sz169Kj379NUEfABAAB2gt/85jdq3bq1pk6dqr/+9a9q1aqVhgwZ\noscff1wPPvhgTgT8Hj166I033tDvfvc7vfjii1qwYIEOOOAAPfzww9qyZYuKi4sTffXr6qc//al6\n9OihW265RXPnzlVpaam6deumX//615o4caI6deqUWHfUqFH65ptvVFJSoqefflqbNm1S165dNXLk\nSF111VWJOwR17NhRf/zjHzV//nyVlJTom2++Udu2bdW7d29dc801Gj9+fL3q3NSZc66x69Ckmdni\nfv369cv0+GYAAHLZsmXLJEl9+/Zt5Jog11x++eW66667tGDBAh177LGNXZ0mraZ/Z/3799eSJUuW\nOOf612d/9MEHAABARqtXr64y7+2339Zf/vIXdevWTQMGDGiEWmFH6KIDAACAjPr27at+/frpwAMP\nVPPmzfXhhx8muhfdc889iXvxo+ngiAAAACCjX/7yl3ruuef06KOPatOmTWrfvr1GjBihq6++WgMH\nDmzs6iENAj4AAAAyuvnmm3XzzTc3djVQC/TBBwAAADxCwAcAAAA8QsAHAAAAPELABwAAADxCwAcA\nAAA8QsAHAAAAPELABwAAADxCwAcAAAA8QsAHAAAAPELABwAAaCAfffSRzEwXXnhh0vxzzjlHZqZV\nq1bVuKw99thD++67b7armCRTfRvTP//5T5mZbrrppsauSpNFwAcAALu0s88+W2ame++9t9p1hw8f\nLjPTM8880wA12/nKy8tlZjrhhBMauyrIIgI+AADYpV100UWSpGnTpu1wvZUrV+qf//ynunbtqpEj\nR2a1DrfddpuWLVumLl26ZLXc+tprr720bNkyzpbnGAI+AADYpQ0ZMkT77bef3n33XS1ZsiTjeg89\n9JCcc/rZz36m/Pz8rNaha9eu6tOnT9bLra9mzZqpT58+Ta7hgR0j4AMAgF1e/Cz+gw8+mHZ5RUWF\npk+fXqU/+pdffqnrr79eAwcOVJcuXVRQUKDu3bvr7LPP1vLly2u8/0x98J1zuuuuu3TAAQeosLBQ\n3bt312WXXaaNGzemLef777/XrbfeqqFDh6p79+4qKChQp06dNGbMGL355ptJ606bNk3NmjWTJM2b\nN09mlnjFz9jvqA/+6tWrdckll2ivvfZSYWGhOnXqpNNPP13vvvtulXWnTZsmM9PMmTM1b948DR48\nWK1bt1a7du00cuRIffjhhzX+rXbkww8/1Lnnnqtu3bqpoKBA3bp10/jx4/Xxxx9XWXfjxo26/vrr\nddBBB6lNmzZq06aN9t13X40bN67KdyguLtawYcPUpUuXxHEYMmSI7r///qzUO9uaVjMRAACgEYwf\nP17XXnut/u///k9TpkxRy5Ytk5Y///zz+vLLL3XiiSeqV69eifnz589PBOrDDz9crVq10ooVK/T4\n44/r73//u15//XUddNBBda7XpZdeqnvvvVfdunXTz3/+czVr1kzFxcV66623VFZWpubNmyetv3Tp\nUk2cOFGDBw/WyJEjtdtuu+mzzz7TnDlz9Nxzz+m5555L9Lfv16+fJk2apBtvvFG9evXSeeedlyhn\n0KBBO6zXxx9/rOOOO05r1qzRCSecoLPOOkuff/65nnjiCT377LN65plndPLJJ1fZrri4WLNnz9Yp\np5yiSy65REuXLtXcuXP19ttv64MPPlCHDh3q/Fu98cYbGj58uDZt2qTRo0erT58+Wr58uR555BHN\nmTNH8+bNU79+/STFGk7Dhw/Xm2++qYEDB+qiiy5SXl6eVq1apfnz52vIkCE6/PDDJUn33nuvfvWr\nX6lr164aNWqUioqKtHbtWr3//vt6+OGH9Ytf/KLOdd5pnHO8dvCStLhfv34OAAAfffDBB+6DDz5o\n7Go0CWeeeaaT5KZPn15l2ahRo5wk98QTTyTNX7NmjSstLa2y/pIlS1zLli3diBEjkuavWLHCSXIX\nXHBB0vyzzz7bSXJffPFFYt6rr77qJLnevXu79evXJ+Zv3rzZHXnkkU6S22effZLK+e6779y6deuq\n1GflypWuc+fO7qCDDkqaX1ZW5iS5448/vso2O6rvsGHDnCR3yy23JM1/7bXXXCQScUVFRe6HH35I\nzH/wwQedJJefn+/mz5+ftM2ECROcJDdlypS0dUj1j3/8w0lyN954Y2JeRUWF6927t5PkZs2albT+\nzJkznSR34IEHumg06pyLHR9J7owzzqhSfnl5edLvfcghh7jmzZu7b775psq66ealU9O/s379+jlJ\ni1098ytn8AEAQGaT2zV2DWpu8oZ6bX7xxRfr8ccf17Rp03T++ecn5n/11Vd67rnn1KlTJ40ePTpp\nm86dO6ct6/DDD9fgwYM1b948VVRUKC8vr9b1mT59uiRp0qRJat++fWJ+ixYt9Mc//lEnnnhilW12\n2223tGXttddeOu2003Tfffdp9erV6tatW63rE7dy5Uq9/PLL6tWrl6666qqkZT/60Y905plnatas\nWSouLtZZZ52VtPzss8/WkCFDkuZdfPHFuv322/XWW2/VuU4lJSVasWKFfvSjH+l//ud/quxz6tSp\neuONN7Ro0SINHDgwsaxFixZVysrLy0v6vaXYWIR4d6awoqKiOtd5Z6IPPgAAgKRhw4Zpn3320cKF\nC7Vs2bLE/OnTp6u8vFznn39+2pA3Z84cnXrqqerSpYuaNWuW6Mf+/PPPa8uWLVq/fn2d6hMf8Dt4\n8OAqywYNGqRIJH2MKykp0dixY7XnnnuqsLAwUZ/77rtPUmzcQH3E+6cPGjQo7aDgYcOGJa0XdsQR\nR1SZt+eee0qSvvvuuzrXKf5bxfddXZ0OPvhgHXzwwXrkkUf0ox/9SLfddpsWLVqksrKyKtueffbZ\nKi0t1QEHHKDf/OY3mj17ttatW1fnujYEzuADAABIicGkv/vd7zRt2jRNmTJFzjk99NBDMrPEQNyw\nKVOmaMKECerQoYNOOOEE7bXXXmrRooXMTE8//bT+/e9/a9u2bXWqz4YNsSsS6a4SFBQUVDnLLElP\nPPGExo0bpxYtWujEE0/U3nvvrVatWikSiejll19WSUlJneuTWq+uXbumXR6f//3331dZlu4KQ7yR\nUFFR0WABvFRAAAAgAElEQVR1ys/P1/z583XDDTfoqaee0tVXXy1Jatu2rc4//3z98Y9/VKtWrSRJ\nV199tTp16qT77rtPd9xxh/785z/LzDR06FDddtttiX79TQkBHwAAZFbPbi+55mc/+5muu+46/e1v\nf9PNN9+skpISffLJJxo2bFiVp8aWlZXp+uuvV7du3bRkyZIqQbykpKRedWnXLtY96uuvv1aPHj2S\nlm3fvl3fffddlcA8adIkNW/eXIsXL9b++++ftOyLL76od53C9VqzZk3a5V999VXSeg2hLnXq2LGj\n7rzzTt15551asWKFXnnlFT3wwAO66667tHHjxkQXKUk6//zzdf755+v777/XwoUL9fTTT2v69Ok6\n6aSTtHz5cnXs2HEnfrvao4sOAABAoHPnzho1apTWrVun4uLixMOvLr744irrfv311yotLdVxxx1X\nJdxv3LgxbReV2oifGX711VerLHvttdcUjUarzP/444910EEHVQn3FRUVWrhwYZX14918anP2PH53\nmZKSkrTbzZ8/P6n+DSFep1deeSXt8urq1Lt3b1100UV69dVX1aJFCxUXF6ddb7fddtOpp56qhx56\nSOeee67WrVunBQsW1P8LZBkBHwAAICTeFWfKlCl65plnVFRUpJ/85CdV1uvatasKCwv19ttv64cf\nfkjM3759u37961/Xq0+5FLuaIEk33nhjUneXLVu26Pe//33abfbaay99+OGHSWeynXO67rrr0t5r\nPhKJqH379vr8889rXK+ePXtq6NCh+vjjj3X33XcnLVu4cKEee+wxdezYscqA5J1p0KBB2nffffXK\nK69UCeezZs3SokWL1LdvXx1zzDGSpE8++UQrV66sUs53332nsrKypNukzp8/P35nxQTnnNauXStJ\nVW6p2hTQRQcAACBk+PDh6tmzZ+KuLpdeeqkKCgqqrJeXl6df//rXuv3223XwwQdr1KhR2rZtm15+\n+WVt2LBBgwcPTnv2vaYGDRqkSy65RPfdd58OPPBAnXHGGcrPz1dxcbF23313derUqco2V155pS69\n9FIddthhOv3005Wfn6+SkhL997//1YgRIzR37twq2xx//PF68sknNXr0aB1++OHKz8/XkCFDdNxx\nx2Ws2wMPPKDjjjtOV155pZ5//nn1798/cR/8/Px8zZgxI9GHvSFEIhE9/PDDGj58uE4//XSNGTNG\n+++/v5YvX67Zs2erbdu2+tvf/iYzkxQblHvmmWfqqKOOUt++fdW1a1etXbtWs2fPVnl5ua655ppE\n2SNHjlT79u119NFHq2fPnqqoqFBJSYneeecdHXXUURo6dGiDfc+a4gw+AABASOqTW9MNro27+eab\ndeutt6qwsFAPPPCAiouLNWDAAL399tvaY4896l2XqVOn6o477lDbtm11//33a9asWTrllFP00ksv\npb2jz69+9Ss99NBD6ty5s6ZPn65HH31UPXv21JtvvqlDDz007T7uvvtujRs3TosWLdKNN96oSZMm\nZezqEte7d28tXrxYP//5z7Vs2TLdfvvteuGFF3Tqqadq4cKFGjFiRL2/e20NHDhQb7/9tsaNG6fX\nX389cWecs846S++8807SHXwGDBiga665RpFIRM8//7ymTJmiF198UUcddZReeOEFXXbZZYl1b731\nVvXv31+LFy/WPffcoxkzZqiiokK33nqr5s2bl/ZOQo3NUi851KkQszMkDZZ0mKRDJbWR9Khz7pyd\nWY6Z9ZT06Q6KfMw5N642dUizj8X9+vXrt3jx4voUAwBAkxS/HWTfvn0buSaAv2r6d9a/f38tWbJk\niXOuf332l60mx0TFAvkmSask9Wngct6XlG40xNI61gMAAADISdkK+FcqFsg/UuwM/PwGLuc959zk\nOu4TAAAA8EZWAr5zLhHE44MXGrMcAAAAYFfV9EYF1E03M/u5pI6SvpW0yDn3r0auEwAAANDgfAn4\nJwavBDN7RdJ451zNb+wKAAAA5LhcD/ibJd2o2ADbT4J5h0iaLGmopHlmdphz7of0m1cys0y3yanr\ngGEAAACgweX0ffCdc2udc9c555Y4574PXq9JGi7pTUn7Srpwx6UAAAAAO0c2bklfW7l+Bj8t51y5\nmU2TNEDSIEl31mCbtPcbDc7s98tuDQEAaBrMTM45RaNRRSI5fd4PaJLiAb8hbyDj81/yN8G04Z6T\nDABAjiksLJQk/fBDtb1ZAdRB/G8r/rfWEHwO+EcH0092uBYAALuwNm3aSJLWrFmj0tJSRaPRRulS\nAPgkflWstLRUa9askVT5t9YQGryLjpk1k7SPpDLn3Mf1LKufYg+5iqbMP16xh2ZJ0sz67AMAAJ91\n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\n8J61XwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7a84239518>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 250,
       "width": 380
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(losses['train'], label='Training loss')\n",
    "plt.plot(losses['validation'], label='Validation loss')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check out your predictions\n",
    "\n",
    "Here, use the test data to view how well your network is modeling the data. If something is completely wrong here, make sure each step in your network is implemented correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+0AAAIgCAYAAADwRojNAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAWJQAAFiUBSVIk8AAAIABJREFUeJzs3XucHFWZP/7P6bmFJJOEGCDhIkGXu4DcRMItBlB0NVFh\nISsuwor7lXVBhZ8/QWAJC7h+FREQURdZo4CABLlKUBEiICyEBMGFgIAMl8g9mdwzmZk+3z+6e6bq\n9KnuqjrnVNfp+rxfL14z6euZnummnnqe8zxCSgkiIiIiIiIiyp9SqxdARERERERERHoM2omIiIiI\niIhyikE7ERERERERUU4xaCciIiIiIiLKKQbtRERERERERDnFoJ2IiIiIiIgopxi0ExEREREREeUU\ng3YiIiIiIiKinGLQTkRERERERJRTDNqJiIiIiIiIcopBOxEREREREVFOMWgnIiIiIiIiyikG7URE\nREREREQ5xaCdiIiIiIiIKKcYtBMRERERERHlVGerF5AXQogXAUwA0NfipRAREREREZFd0wGsllLu\n0OqFJMWgfdSEzTbbbPKuu+46udULISIiIiIiInuWLVuGDRs2tHoZqTBoH9W36667Tl6yZEmr10FE\nREREREQW7bvvvli6dGlfq9eRBve0ExEREREREeUUg3YiIiIiIiKinGLQTkRERERERJRTDNqJiIiI\niIiIcopBOxEREREREVFOMWgnIiIiIiIiyikG7UREREREREQ5xTntREREREQUUi6XsWLFCqxZswYD\nAwOQUrZ6SUQjhBDo6elBb28vJk+ejFKpvXPRDNqJiIiIiGhEuVzGK6+8gvXr17d6KURaUkps3LgR\nGzduxLp167Dddtu1deDOoJ2IiIiIiEasWLEC69evR2dnJ6ZOnYpx48a1dUBE/imXy1i3bh1ef/11\nrF+/HitWrMCUKVNavSxn+O4jIiIiIqIRa9asAQBMnToVvb29DNgpd0qlEnp7ezF16lQAo3+z7Yrv\nQCIiIiIiGjEwMAAAGDduXItXQtRY7W+09jfbrhi0ExERERHRiFrTOWbYKe+EEADQ9o0S+U4kIiIi\nIiIi79SC9nbHoJ2IiIiIiIgopxi0ExEREREREeUUg/aiWvcO8PzvgeGhVq+EiIiIiIiIIjBoL6Kh\nTcCPDgKu/TRw95mtXg0RERERESXU19cHIQROPPHE0OUnnngihBDo6+tz8ryLFi2CEALz5s1z8vhU\n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\nUkq/8FoOAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7a81a53198>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 272,
       "width": 502
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8,4))\n",
    "\n",
    "mean, std = scaled_features['cnt']\n",
    "predictions = network.run(test_features).T*std + mean\n",
    "ax.plot(predictions[0], label='Prediction')\n",
    "ax.plot((test_targets['cnt']*std + mean).values, label='Data')\n",
    "ax.set_xlim(right=len(predictions))\n",
    "ax.legend()\n",
    "\n",
    "dates = pd.to_datetime(rides.ix[test_data.index]['dteday'])\n",
    "dates = dates.apply(lambda d: d.strftime('%b %d'))\n",
    "ax.set_xticks(np.arange(len(dates))[12::24])\n",
    "_ = ax.set_xticklabels(dates[12::24], rotation=45)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OPTIONAL: Thinking about your results(this question will not be evaluated in the rubric).\n",
    " \n",
    "Answer these questions about your results. How well does the model predict the data? Where does it fail? Why does it fail where it does?\n",
    "\n",
    "> **Note:** You can edit the text in this cell by double clicking on it. When you want to render the text, press control + enter\n",
    "\n",
    "#### Your answer below"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "I am sorry that I cannot pass this project now, since I found that there were many bugs in this project. I have paid a lot of time in it, but still cannot tackle them all. Please help me to findout the problem. Thanks!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
